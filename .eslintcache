[{"C:\\Projects\\dealer_front\\src\\index.tsx":"1","C:\\Projects\\dealer_front\\src\\routes.tsx":"2","C:\\Projects\\dealer_front\\src\\store\\index.ts":"3","C:\\Projects\\dealer_front\\src\\pages\\App.tsx":"4","C:\\Projects\\dealer_front\\src\\pages\\Login.tsx":"5","C:\\Projects\\dealer_front\\src\\reducers\\project.ts":"6","C:\\Projects\\dealer_front\\src\\reducers\\app.ts":"7","C:\\Projects\\dealer_front\\src\\reducers\\user.ts":"8","C:\\Projects\\dealer_front\\src\\reducers\\tool.ts":"9","C:\\Projects\\dealer_front\\src\\reducers\\auth.ts":"10","C:\\Projects\\dealer_front\\src\\store\\types.ts":"11","C:\\Projects\\dealer_front\\src\\pages\\Main.tsx":"12","C:\\Projects\\dealer_front\\src\\pages\\NewOffer.tsx":"13","C:\\Projects\\dealer_front\\src\\pages\\CompanyProfile.tsx":"14","C:\\Projects\\dealer_front\\src\\pages\\Coworkers.tsx":"15","C:\\Projects\\dealer_front\\src\\pages\\ProjectsList.tsx":"16","C:\\Projects\\dealer_front\\src\\pages\\User.tsx":"17","C:\\Projects\\dealer_front\\src\\services\\thunks.ts":"18","C:\\Projects\\dealer_front\\src\\pages\\Project.tsx":"19","C:\\Projects\\dealer_front\\src\\layouts\\mainLayout.tsx":"20","C:\\Projects\\dealer_front\\src\\actions\\user.ts":"21","C:\\Projects\\dealer_front\\src\\actions\\tool.ts":"22","C:\\Projects\\dealer_front\\src\\actions\\app.ts":"23","C:\\Projects\\dealer_front\\src\\actions\\project.ts":"24","C:\\Projects\\dealer_front\\src\\actions\\auth.ts":"25","C:\\Projects\\dealer_front\\src\\middleware\\api.ts":"26","C:\\Projects\\dealer_front\\src\\components\\Slider.tsx":"27","C:\\Projects\\dealer_front\\src\\components\\CompanyCard.tsx":"28","C:\\Projects\\dealer_front\\src\\components\\Chart.tsx":"29","C:\\Projects\\dealer_front\\src\\components\\ComOffer.tsx":"30","C:\\Projects\\dealer_front\\src\\components\\ModalResetPassword.tsx":"31","C:\\Projects\\dealer_front\\src\\components\\Configurator.tsx":"32","C:\\Projects\\dealer_front\\src\\components\\ModalCompanyInfo.tsx":"33","C:\\Projects\\dealer_front\\src\\components\\ModalUserInfo.tsx":"34","C:\\Projects\\dealer_front\\src\\components\\ProjectOneByCard.tsx":"35","C:\\Projects\\dealer_front\\src\\components\\ToolInfoInProject.tsx":"36","C:\\Projects\\dealer_front\\src\\components\\MenuItems.tsx":"37","C:\\Projects\\dealer_front\\src\\types\\index.ts":"38","C:\\Projects\\dealer_front\\src\\components\\AccordionOfTools.tsx":"39","C:\\Projects\\dealer_front\\src\\components\\ModalCommercialOffer.tsx":"40","C:\\Projects\\dealer_front\\src\\components\\Search.tsx":"41","C:\\Projects\\dealer_front\\src\\components\\ReqContainer.tsx":"42","C:\\Projects\\dealer_front\\src\\middleware\\dealer_projects.js":"43","C:\\Projects\\dealer_front\\src\\middleware\\dealer_projects_tools.js":"44","C:\\Projects\\dealer_front\\src\\middleware\\infods5i_dealers.js":"45","C:\\Projects\\dealer_front\\src\\config\\server.ts":"46","C:\\Projects\\dealer_front\\src\\components\\MailsMenu.tsx":"47","C:\\Projects\\dealer_front\\src\\components\\NotificationsMenu.tsx":"48","C:\\Projects\\dealer_front\\src\\components\\AdditionalDealerReq.tsx":"49","C:\\Projects\\dealer_front\\src\\components\\NewProjectReq.tsx":"50","C:\\Projects\\dealer_front\\src\\components\\ModalProjectPresend.tsx":"51","C:\\Projects\\dealer_front\\src\\components\\FixedCalcBottom.tsx":"52","C:\\Projects\\dealer_front\\src\\components\\CommercialOfferOne.tsx":"53","C:\\Projects\\dealer_front\\src\\components\\ModalCommercialOfferPresend.tsx":"54","C:\\Projects\\dealer_front\\src\\components\\CommercialOfferPositionMain.tsx":"55","C:\\Projects\\dealer_front\\src\\components\\DataTable.tsx":"56","C:\\Projects\\dealer_front\\src\\components\\SortedToolsTable.tsx":"57"},{"size":547,"mtime":1614584456501,"results":"58","hashOfConfig":"59"},{"size":327,"mtime":1611736670016,"results":"60","hashOfConfig":"59"},{"size":1155,"mtime":1614584456595,"results":"61","hashOfConfig":"59"},{"size":4024,"mtime":1615469655845,"results":"62","hashOfConfig":"59"},{"size":3795,"mtime":1615440596901,"results":"63","hashOfConfig":"59"},{"size":1155,"mtime":1615462234201,"results":"64","hashOfConfig":"59"},{"size":1155,"mtime":1614584456585,"results":"65","hashOfConfig":"59"},{"size":1243,"mtime":1614584456589,"results":"66","hashOfConfig":"59"},{"size":1121,"mtime":1615455788896,"results":"67","hashOfConfig":"59"},{"size":2366,"mtime":1615451086956,"results":"68","hashOfConfig":"59"},{"size":3495,"mtime":1615461613632,"results":"69","hashOfConfig":"59"},{"size":2355,"mtime":1611932614643,"results":"70","hashOfConfig":"59"},{"size":2809,"mtime":1614145763813,"results":"71","hashOfConfig":"59"},{"size":12799,"mtime":1614145763798,"results":"72","hashOfConfig":"59"},{"size":7885,"mtime":1614584456552,"results":"73","hashOfConfig":"59"},{"size":3019,"mtime":1614584456582,"results":"74","hashOfConfig":"59"},{"size":7323,"mtime":1614145763838,"results":"75","hashOfConfig":"59"},{"size":2498,"mtime":1615462282568,"results":"76","hashOfConfig":"59"},{"size":8090,"mtime":1615474087556,"results":"77","hashOfConfig":"59"},{"size":3214,"mtime":1614584456543,"results":"78","hashOfConfig":"59"},{"size":437,"mtime":1614584456245,"results":"79","hashOfConfig":"59"},{"size":742,"mtime":1614584456243,"results":"80","hashOfConfig":"59"},{"size":873,"mtime":1614584456229,"results":"81","hashOfConfig":"59"},{"size":763,"mtime":1614145763688,"results":"82","hashOfConfig":"59"},{"size":967,"mtime":1615440596822,"results":"83","hashOfConfig":"59"},{"size":3531,"mtime":1615462951165,"results":"84","hashOfConfig":"59"},{"size":1656,"mtime":1611638743988,"results":"85","hashOfConfig":"59"},{"size":4724,"mtime":1614145763720,"results":"86","hashOfConfig":"59"},{"size":3398,"mtime":1613573612009,"results":"87","hashOfConfig":"59"},{"size":5943,"mtime":1614584456337,"results":"88","hashOfConfig":"59"},{"size":3079,"mtime":1614584456416,"results":"89","hashOfConfig":"59"},{"size":18385,"mtime":1614584456356,"results":"90","hashOfConfig":"59"},{"size":7706,"mtime":1614145763751,"results":"91","hashOfConfig":"59"},{"size":7960,"mtime":1614584456421,"results":"92","hashOfConfig":"59"},{"size":10800,"mtime":1615469313844,"results":"93","hashOfConfig":"59"},{"size":1765,"mtime":1614584456478,"results":"94","hashOfConfig":"59"},{"size":5526,"mtime":1614584456365,"results":"95","hashOfConfig":"59"},{"size":2899,"mtime":1614584456599,"results":"96","hashOfConfig":"59"},{"size":9243,"mtime":1615457162450,"results":"97","hashOfConfig":"59"},{"size":7112,"mtime":1614584456376,"results":"98","hashOfConfig":"59"},{"size":8659,"mtime":1614145763782,"results":"99","hashOfConfig":"59"},{"size":2442,"mtime":1615440596854,"results":"100","hashOfConfig":"59"},{"size":3540,"mtime":1613398138667,"results":"101","hashOfConfig":"59"},{"size":7997,"mtime":1611812559363,"results":"102","hashOfConfig":"59"},{"size":31974,"mtime":1611812559371,"results":"103","hashOfConfig":"59"},{"size":46,"mtime":1615440596870,"results":"104","hashOfConfig":"59"},{"size":2733,"mtime":1613398138494,"results":"105","hashOfConfig":"59"},{"size":3536,"mtime":1613398138551,"results":"106","hashOfConfig":"59"},{"size":3780,"mtime":1615440596823,"results":"107","hashOfConfig":"59"},{"size":4847,"mtime":1615440596839,"results":"108","hashOfConfig":"59"},{"size":6410,"mtime":1615440596839,"results":"109","hashOfConfig":"59"},{"size":1489,"mtime":1614145763735,"results":"110","hashOfConfig":"59"},{"size":909,"mtime":1611932614567,"results":"111","hashOfConfig":"59"},{"size":2519,"mtime":1611932614584,"results":"112","hashOfConfig":"59"},{"size":8001,"mtime":1614584456346,"results":"113","hashOfConfig":"59"},{"size":3405,"mtime":1611932614571,"results":"114","hashOfConfig":"59"},{"size":2272,"mtime":1615469869724,"results":"115","hashOfConfig":"59"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},"6usd6d",{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131","usedDeprecatedRules":"118"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138","usedDeprecatedRules":"118"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145","usedDeprecatedRules":"118"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148","usedDeprecatedRules":"118"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"151","usedDeprecatedRules":"118"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"154","usedDeprecatedRules":"118"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"157","usedDeprecatedRules":"118"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"160","usedDeprecatedRules":"118"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"163","messages":"164","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"165","usedDeprecatedRules":"118"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"172","usedDeprecatedRules":"118"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"181","usedDeprecatedRules":"118"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"184","usedDeprecatedRules":"118"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"187","usedDeprecatedRules":"118"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"190","usedDeprecatedRules":"118"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"193","usedDeprecatedRules":"118"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"196","usedDeprecatedRules":"118"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"199","usedDeprecatedRules":"118"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"202","usedDeprecatedRules":"118"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"205","messages":"206","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"209","usedDeprecatedRules":"118"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"212","messages":"213","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"214","usedDeprecatedRules":"118"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"217","usedDeprecatedRules":"118"},{"filePath":"218","messages":"219","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"220","usedDeprecatedRules":"118"},{"filePath":"221","messages":"222","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"223","messages":"224","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"225","messages":"226","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"227"},{"filePath":"228","messages":"229","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"230","messages":"231","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"232","messages":"233","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"234","usedDeprecatedRules":"118"},{"filePath":"235","messages":"236","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"237","usedDeprecatedRules":"118"},{"filePath":"238","messages":"239","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"240","messages":"241","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"242","messages":"243","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"244","usedDeprecatedRules":"118"},{"filePath":"245","messages":"246","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"247","messages":"248","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"249","messages":"250","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"251","messages":"252","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"253","usedDeprecatedRules":"118"},{"filePath":"254","messages":"255","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"256","usedDeprecatedRules":"118"},{"filePath":"257","messages":"258","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Projects\\dealer_front\\src\\index.tsx",[],["259","260"],"C:\\Projects\\dealer_front\\src\\routes.tsx",[],"C:\\Projects\\dealer_front\\src\\store\\index.ts",[],"C:\\Projects\\dealer_front\\src\\pages\\App.tsx",["261","262","263","264"],"C:\\Projects\\dealer_front\\src\\pages\\Login.tsx",[],"C:\\Projects\\dealer_front\\src\\reducers\\project.ts",[],"C:\\Projects\\dealer_front\\src\\reducers\\app.ts",["265"],"import {\r\n    AppState,\r\n    SET_SUCCESS,\r\n    UNSET_SUCCESS,\r\n    SIDEBAR_OPENED,\r\n    SIDEBAR_CLOSED,\r\n    SET_ERROR\r\n} from '../store/types'\r\n\r\nexport function appReducer(\r\n    state: AppState = {\r\n        isFetching: true,\r\n        projectSuccesfullyAdded: false,\r\n        error: false,\r\n        sidebarOpened: true\r\n    },\r\n    action\r\n) {\r\n    switch(action.type) {\r\n        case SET_SUCCESS: {\r\n            return Object.assign({}, state, {\r\n                isFetching: false,\r\n                projectSuccesfullyAdded: true\r\n            });\r\n        }\r\n        case UNSET_SUCCESS: {\r\n            return Object.assign({}, state, {\r\n                isFetching: false,\r\n                projectSuccesfullyAdded: false\r\n            });\r\n        }\r\n        case SIDEBAR_OPENED: {\r\n            return Object.assign({}, state, {\r\n                isFetching: false,\r\n                sidebarOpened: true\r\n            });\r\n        }\r\n        case SIDEBAR_CLOSED: {\r\n            return Object.assign({}, state, {\r\n                isFetching: false,\r\n                sidebarOpened: false\r\n            });\r\n        }\r\n        default: return state;\r\n    }\r\n}\r\n\r\n","C:\\Projects\\dealer_front\\src\\reducers\\user.ts",[],"C:\\Projects\\dealer_front\\src\\reducers\\tool.ts",[],"C:\\Projects\\dealer_front\\src\\reducers\\auth.ts",["266"],"import { AuthActionTypes, AuthState, SIGN_IN, SIGN_OUT, AUTH_CHECK } from \"../store/types\";\r\nimport { User } from \"../types\";\r\n\r\nfunction isSignIned(): boolean {\r\n  const token = localStorage.getItem(\"react-crm-token\")\r\n  return token ? true : false\r\n}\r\n\r\nfunction getUser(): User {\r\n  const user = localStorage.getItem(\"react-crm-user\")\r\n  return user ? JSON.parse(user) : {} as User\r\n}\r\nfunction getToken(): string | undefined {\r\n  const token = localStorage.getItem(\"react-crm-token\")\r\n  return token ? token : undefined\r\n}\r\nfunction setTokenUser(token, user) {\r\n  localStorage.setItem(\"react-crm-token\", token);\r\n  localStorage.setItem(\"react-crm-user\", JSON.stringify(user));\r\n}\r\n\r\nfunction removeTokenUser(){\r\n  console.log('logout reducer')\r\n  localStorage.removeItem(\"react-crm-token\");\r\n  localStorage.removeItem(\"react-crm-user\");\r\n}\r\n\r\n// The auth reducer. The starting state sets authentication\r\n// based on a token being in local storage. In a real app,\r\n// we would also want a util to check if the token is expired.\r\nexport function authReducer(\r\n  state: AuthState = {\r\n    isFetching: false,\r\n    // isAuthenticated: isSignIned(),// localStorage.getItem(\"token\") ? true : false,\r\n    isAuthenticated: false,\r\n    user: getUser(),\r\n    token: getToken()\r\n  },\r\n  action: AuthActionTypes\r\n) {\r\n  const payload = action.payload\r\n\r\n  switch (action.type) {\r\n    case SIGN_IN:\r\n      if (payload.token && payload.user ) {\r\n        setTokenUser(payload.token, payload.user)\r\n        return Object.assign({}, state, {\r\n          isFetching: false,\r\n          isAuthenticated: true,\r\n          errorMessage: \"\",\r\n          user: action.payload.user,\r\n          token: action.payload.token\r\n        });\r\n      }\r\n      else {\r\n        return Object.assign({}, state, {\r\n          isFetching: false,\r\n          isAuthenticated: true,\r\n          errorMessage: action.error,\r\n          user: undefined,\r\n          token: undefined\r\n        });\r\n      }\r\n    case SIGN_OUT:\r\n      removeTokenUser()\r\n      return Object.assign({}, state, {\r\n        isFetching: true,\r\n        isAuthenticated: false,\r\n        user: undefined,\r\n        token: undefined\r\n      })\r\n    case AUTH_CHECK:\r\n      console.log(action)\r\n      return Object.assign({}, state, {\r\n        isAuthenticated: action.payload.isAuthenticated,\r\n      })\r\n    default:\r\n      return state;\r\n  }\r\n}","C:\\Projects\\dealer_front\\src\\store\\types.ts",[],"C:\\Projects\\dealer_front\\src\\pages\\Main.tsx",[],"C:\\Projects\\dealer_front\\src\\pages\\NewOffer.tsx",["267","268"],"import React from 'react'\r\nimport ToolsOffersSidebar from '../components/ToolsOffersSidebar'\r\nimport Configurator from '../components/Configurator'\r\nimport ComOffer from '../components/ComOffer'\r\nimport Grid from \"@material-ui/core/Grid\"\r\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\r\n\r\n\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n        padding: theme.spacing(2),\r\n        minHeight: \"100vh\"\r\n    },\r\n  }),\r\n);\r\n\r\nfunction NewOffer() {\r\n    const classes = useStyles()\r\n    // TestData\r\n    const [authorised, setAuthorised] = React.useState([\r\n        {\r\n            id: 0,\r\n            parent: null,\r\n            name: 'Рентгеновский аппарат Listem REX-650RF: FLUOROSCOPY',\r\n            image: 'https://ds-med.ru/wp-content/uploads/2019/05/850-650-RF222-2.png',\r\n            wiki: 'https://ds-med.ru/product/listem-rex-650rf-fluoroscopy/',\r\n            dealerPrice: 300000,\r\n            dealerDiscount: 30,\r\n            clientPrice: 300000,\r\n            count: 1\r\n        },\r\n        {\r\n            id: 1,\r\n            parent: null,\r\n            category: 1,\r\n            name: 'Центральная станция мониторинга Votem VC-2000',\r\n            image: 'https://ds-med.ru/wp-content/uploads/2020/04/650-R-DRS.png',\r\n            wiki: 'https://ds-med.ru/product/listem-progen-650r-drs/',\r\n            dealerPrice: 300000,\r\n            dealerDiscount: 30,\r\n            clientPrice: 300000,\r\n            count: 1\r\n        },\r\n        {\r\n            id: 2,\r\n            parent: 0,\r\n            category: 1,\r\n            name: 'Кресло врача',\r\n            image: 'https://ds-med.ru/wp-content/uploads/2020/04/650-R-DRS.png',\r\n            wiki: 'https://ds-med.ru/product/listem-progen-650r-drs/',\r\n            dealerPrice: 300000,\r\n            dealerDiscount: 30,\r\n            clientPrice: 300000,\r\n            count: 1\r\n        },\r\n        {\r\n            id: 3,\r\n            parent: 0,\r\n            category: 1,\r\n            name: 'Рабочее место врача',\r\n            image: 'https://ds-med.ru/wp-content/uploads/2020/04/650-R-DRS.png',\r\n            wiki: 'https://ds-med.ru/product/listem-progen-650r-drs/',\r\n            dealerPrice: 300000,\r\n            dealerDiscount: 30,\r\n            clientPrice: 300000,\r\n            count: 1\r\n        },\r\n    ])\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <Grid container>\r\n                <Grid item xs={12} md={7}>\r\n                    <Configurator />\r\n                </Grid>\r\n                <Grid item xs={12} md={5} style={{height: \"100%\"}}>\r\n                    <ComOffer authorised={authorised}/>\r\n                </Grid>\r\n            </Grid>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default NewOffer","C:\\Projects\\dealer_front\\src\\pages\\CompanyProfile.tsx",["269","270","271","272"],"import React from 'react'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport Paper from '@material-ui/core/Paper'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\r\nimport CompanyCard from '../components/CompanyCard'\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Button from '@material-ui/core/Button';\r\nimport PlusCircle from '../assets/icons/Plus circle.svg'\r\nimport EditCircle from '../assets/icons/Edit 3.svg'\r\nimport ModalCompanyInfo from '../components/ModalCompanyInfo'\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    paper: {\r\n        marginBottom: theme.spacing(1),\r\n        overflow: \"hidden\",\r\n        marginTop: 10,\r\n        padding: theme.spacing(3),\r\n    },\r\n    headerWrapper: {\r\n        width: \"100%\",\r\n        background: '#e3ecf7',\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        justifyContent: \"center\",\r\n        alignItems: \"space-between\",\r\n        padding: theme.spacing(3),\r\n        color: \"#688cbc\",\r\n        minHeight: \"120px\"\r\n    },\r\n    contentWrapper: {\r\n        padding: theme.spacing(2),\r\n    },\r\n    gridCell: {\r\n        padding: theme.spacing(1)\r\n    },\r\n    tableCellName: {\r\n        fontWeight: \"bolder\", \r\n        color: \"#96999c\", \r\n        marginRight: 5\r\n    },\r\n    tableCellValue: {\r\n        fontWeight: \"bolder\", \r\n        color: \"#666b73\"\r\n    },\r\n    reqAction: {\r\n        display: \"flex\",\r\n        justifyContent: \"flex-end\",\r\n        alignItems: \"center\"\r\n    },\r\n    mainCompanyContainerHeader: {\r\n        display: \"flex\",\r\n        justifyContent: \"flex-start\",\r\n        alignItems: \"center\",\r\n        marginBottom: \"1em\"\r\n    }\r\n  }),\r\n);\r\n\r\nconst fakeCompanies = [\r\n    {\r\n        id: 0,\r\n        logo: \"https://ds-med.ru/wp-content/uploads/2020/03/logoDS-1.png\",\r\n        brand: \"Medical Solutions\",\r\n        name: 'ООО \"Медицинские решения\"',\r\n        shortname: \"\",\r\n        lawform: \"Общество с ограниченной ответственностью\",\r\n        address: \"142200, Московская область, г. Серпухов, ш. Борисовское, д. 1,  пом. 7, офис 1\",\r\n        postaddress: \"142200, Московская область, г. Серпухов, ш. Борисовское, д. 1,  пом. 7, офис 1\",\r\n        phone: \"+7 499 686 08 80\",\r\n        email: \"info@ds-med.ru , law@ds-med.ru\",\r\n        inn: \"ИНН 7724417426 / КПП 504301001\",\r\n        ogrn: \"ОГРН 1177746863250, ОКАТО 45296571000\",\r\n        req: \"р/с 40702810740000007467 в ПАО Сбербанк г. Москва, к/с 30101810400000000225, БИК 044525225\",\r\n        licenses: \"\",\r\n        director: \"\",\r\n        head_company: false\r\n    },\r\n    {\r\n        id: 1,\r\n        logo: \"https://ds-med.ru/wp-content/uploads/2020/03/logoDS-1.png\",\r\n        brand: \"DS.Vision\",\r\n        name: 'ИНДИВИДУАЛЬНЫЙ ПРЕДПРИНИМАТЕЛЬ ДЕМЕНТЬЕВА НАТАЛЬЯ АЛЕКСАНДРОВНА',\r\n        shortname: \"\",\r\n        lawform: \"Индивидуальный предприниматель\",\r\n        address: \"142207, Московская обл., г. Серпухов, Борисовское шоссе, д. 17, офис 605\",\r\n        postaddress: \"142207, Московская обл., г. Серпухов, Борисовское шоссе, д. 17, офис 605\",\r\n        phone: \"+7 (495) 248-12-21\",\r\n        email: \"info@ds-vision.ru\",\r\n        inn: \"ИНН 503702925292\",\r\n        ogrn: \"ОГРНИП 316504300054402, ОКПО 0102029652\",\r\n        req: \"р/с 40802810520010004182 АО ЮниКредит Банк г. Москва к/с 30101810300000000545 БИК 044525545\",\r\n        licenses: \"\",\r\n        director: \"\",\r\n        head_company: false\r\n    },\r\n    {\r\n        id: 2,\r\n        logo: \"https://ds-med.ru/wp-content/uploads/2020/03/logoDS-1.png\",\r\n        brand: \"DS.Med\",\r\n        name: 'Общество с ограниченной ответственностью  «ДС.Мед»',\r\n        shortname: \"ООО «ДС.Мед»\",\r\n        lawform: \"Индивидуальный предприниматель\",\r\n        address: \"142207, Московская обл., г. Серпухов, Борисовское шоссе, д. 17, офис 605\",\r\n        postaddress: \"142207, Московская обл., г. Серпухов, Борисовское шоссе, д. 17, офис 605\",\r\n        phone: \"+7 (495) 248-12-21\",\r\n        email: \"e.semochkin@ds-med.ru\",\r\n        inn: \"ИНН 5043035712 / КПП 504301001\",\r\n        ogrn: \"ОГРН 1085043003352, ОКАТО 46470000000\",\r\n        req: \"р/с 40702810040000004924 в ПАО Сбербанк г. Москва, к/с 30101810400000000225, БИК 044525225\",\r\n        licenses: \"\",\r\n        director: \"Сёмочкин Евгений Иванович\",\r\n        head_company: true\r\n    },\r\n    {\r\n        id: 3,\r\n        logo: \"https://ds-med.ru/wp-content/uploads/2020/03/logoDS-1.png\",\r\n        brand: \"Л-Сервис\",\r\n        name: 'Общество с ограниченной ответственностью «Л-Сервис»',\r\n        shortname: \"Л-Сервис\",\r\n        lawform: \"Индивидуальный предприниматель\",\r\n        address: \"142207, Московская область, г. Серпухов, Борисовское шоссе, д. 17, этаж 6, офис 601\",\r\n        postaddress: \"142207, Московская область, г. Серпухов, Борисовское шоссе, д. 17, этаж 6, офис 601\",\r\n        phone: \"+7(499)686-00-30\",\r\n        email: \"info@L-Service.ru\",\r\n        inn: \"ИНН 5043048091 / КПП 504301001\",\r\n        ogrn: \"ОГРН 1085043003352, ОКАТО 46470000000\",\r\n        req: \"р/с 40702810040000004924 в ПАО Сбербанк г. Москва, к/с 30101810400000000225, БИК 044525225\",\r\n        licenses: \"№ФС-99-04-004955 от 18.08.2017г. №77.99.15.002.Л.000116.12.16 от 06.12.2016г.\",\r\n        director: \"Сёмочкин Евгений Иванович\",\r\n        head_company: false\r\n    },\r\n]\r\n\r\nfunction CompanyProfile() {\r\n    const classes = useStyles()\r\n    const [open, setOpen] = React.useState(false)\r\n    const [currentCompany, setCurrentCompany] = React.useState({})\r\n    const [headCompany, setHeadCompany] = React.useState(fakeCompanies.find( item => item.head_company === true))\r\n\r\n    const newReqHandler = () => {\r\n        setCurrentCompany(\r\n            {\r\n                id: null,\r\n                logo: \"\",\r\n                brand: \"\",\r\n                name: '',\r\n                shortname: \"\",\r\n                lawform: \"\",\r\n                address: \"\",\r\n                postaddress: \"\",\r\n                phone: \"\",\r\n                email: \"\",\r\n                inn: \"\",\r\n                ogrn: \"\",\r\n                req: \"\",\r\n                licenses: \"\",\r\n                director: \"\",\r\n                head_company: false\r\n            },\r\n        )\r\n        setOpen(true)\r\n    }\r\n\r\n    const mainReqHandler = () => {\r\n        setCurrentCompany(\r\n            {\r\n                id: 0,\r\n                logo: \"\",\r\n                name: '',\r\n                shortname: '',\r\n                inn: '',\r\n                head: '',\r\n                address: ''\r\n            },\r\n        )\r\n        setOpen(true)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className={classes.headerWrapper}>\r\n                <Typography component=\"h1\" variant=\"h4\">\r\n                    Информация о компании {headCompany.brand}\r\n                </Typography>\r\n            </div>\r\n\r\n            <div className={classes.contentWrapper}>\r\n                <Paper className={classes.paper}>\r\n                    <Grid container>\r\n                        <Grid item lg={2} style={{padding: 0, display: \"flex\", alignItems: \"center\"}}>\r\n                            <img src=\"https://ds-med.ru/wp-content/uploads/2020/03/logoDS-1.png\" style={{maxWidth: \"100%\", maxHeight: \"200px\"}}/>\r\n                        </Grid>\r\n                        <Grid item lg={8} className={classes.gridCell}>\r\n                            <Table size=\"small\">\r\n                                <TableBody>\r\n                                    <TableRow>\r\n                                        <TableCell className={classes.tableCellName}>\r\n                                            Название компании\r\n                                        </TableCell>\r\n                                        <TableCell className={classes.tableCellValue}>\r\n                                            {headCompany.brand}\r\n                                        </TableCell>\r\n                                    </TableRow>\r\n                                    <TableRow>\r\n                                        <TableCell className={classes.tableCellName}>\r\n                                            Администратор\r\n                                        </TableCell>\r\n                                        <TableCell className={classes.tableCellValue}>\r\n                                            {headCompany.director}\r\n                                        </TableCell>\r\n                                    </TableRow>\r\n                                    <TableRow>\r\n                                        <TableCell className={classes.tableCellName}>\r\n                                            Зарегистрирована\r\n                                        </TableCell>\r\n                                        <TableCell className={classes.tableCellValue}>\r\n                                            21.10.2019\r\n                                        </TableCell>\r\n                                    </TableRow>\r\n                                    <TableRow>\r\n                                        <TableCell className={classes.tableCellName}>\r\n                                            Телефон\r\n                                        </TableCell>\r\n                                        <TableCell className={classes.tableCellValue}>\r\n                                            {headCompany.phone}\r\n                                        </TableCell>\r\n                                    </TableRow>\r\n                                    <TableRow>\r\n                                        <TableCell className={classes.tableCellName}>\r\n                                            e-mail\r\n                                        </TableCell>\r\n                                        <TableCell className={classes.tableCellValue}>\r\n                                            {headCompany.email}\r\n                                        </TableCell>\r\n                                    </TableRow>\r\n                                </TableBody>\r\n                            </Table>\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <div className={classes.reqAction}>\r\n                        <Button \r\n                            variant=\"outlined\" \r\n                            color=\"primary\" \r\n                            onClick={mainReqHandler}\r\n                            style={{marginRight: 10}}\r\n                        ><img src={EditCircle} style={{marginRight: 10}}/>Редактировать компанию</Button>\r\n                        <Button \r\n                            variant=\"contained\" \r\n                            color=\"primary\" \r\n                            onClick={newReqHandler}\r\n                        ><img src={PlusCircle} style={{marginRight: 10}}/>Добавить реквизиты</Button>\r\n                    </div>\r\n                </Paper>\r\n            </div>\r\n            <div className={classes.contentWrapper}>\r\n                <Typography\r\n                    component=\"h2\" \r\n                    variant=\"h5\"\r\n                    style={{color: \"#688cbc\", display: \"inline-block\", marginTop: 20, marginBottom: 10}}\r\n                >\r\n                    Реквизиты компании\r\n                </Typography>\r\n                {fakeCompanies.map(company =>\r\n                    <CompanyCard \r\n                        company={company} \r\n                        open={open} \r\n                        setOpen={setOpen} \r\n                        setCurrentCompany={setCurrentCompany}\r\n                />)}\r\n            </div>\r\n            <ModalCompanyInfo open={open} setOpen={setOpen} company={currentCompany}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CompanyProfile","C:\\Projects\\dealer_front\\src\\pages\\Coworkers.tsx",["273","274","275"],"import React from 'react'\r\nimport DataTable from '../components/DataTable'\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles'\r\nimport TextField from '@material-ui/core/TextField'\r\nimport Table from '@material-ui/core/Table';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport TablePagination from '@material-ui/core/TablePagination';\r\nimport ModalUserInfo from '../components/ModalUserInfo'\r\nimport { LIST_USERS } from \"../store/types\";\r\nimport { thunkData } from \"../services/thunks\";\r\nimport { connect } from \"react-redux\";\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    paper: {\r\n        marginBottom: theme.spacing(1),\r\n        overflow: \"hidden\",\r\n        marginTop: 10,\r\n        padding: theme.spacing(3)\r\n    },\r\n    headerWrapper: {\r\n        width: \"100%\",\r\n        background: '#e3ecf7',\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        justifyContent: \"center\",\r\n        padding: theme.spacing(3),\r\n        color: \"#688cbc\",\r\n        minHeight: \"120px\"\r\n    },\r\n    contentWrapper: {\r\n        padding: theme.spacing(2),\r\n        display: \"flex\",\r\n        flexDirection: \"column\"\r\n    },\r\n    searchField: {\r\n        margin: theme.spacing(1),\r\n        marginRight: 0,\r\n        maxWidth: 400,\r\n        alignSelf: \"flex-end\"\r\n    },\r\n    coworkerWrapper: {\r\n        padding: theme.spacing(2)\r\n    },\r\n    usertableHead: {\r\n        border: \"2px solid #e1e3e5\",\r\n        \"&.MuiTableRow-root .MuiTableCell-root\": {\r\n            fontWeight: \"bolder\",\r\n            color: \"#4e4a56\"\r\n        }\r\n    }\r\n  }),\r\n);\r\n\r\nconst testUserListReducedToRows = [\r\n    {\r\n        id: 1,\r\n        fullname: 'Иванов Иван Иванович',\r\n        registered: '21.01.2021',\r\n        phone: '+7 (800) 555-35-35',\r\n        mail: \"ivanov@aaa.ru\",\r\n        role: 'Сотрудник',\r\n    },\r\n    {\r\n        id: 2,\r\n        fullname: 'Петров Петр Петрович',\r\n        registered: '21.01.2021',\r\n        phone: '+7 (800) 555-35-35',\r\n        mail: \"petrov@aaa.ru\",\r\n        role: 'Сотрудник'\r\n    },\r\n    {\r\n        id: 3,\r\n        fullname: 'Генералов Алексей Иванович',\r\n        registered: '21.01.2021',\r\n        phone: '+7 (800) 555-35-35',\r\n        mail: \"generalov@aaa.ru\",\r\n        role: 'Нач. отдела'\r\n    },\r\n    {\r\n        id: 4,\r\n        fullname: 'Иванов Иван Иванович',\r\n        registered: '21.01.2021',\r\n        phone: '+7 (800) 555-35-35',\r\n        mail: \"ivanov@aaa.ru\",\r\n        role: 'Сотрудник',\r\n    },\r\n    {\r\n        id: 5,\r\n        fullname: 'Петров Петр Петрович',\r\n        registered: '21.01.2021',\r\n        phone: '+7 (800) 555-35-35',\r\n        mail: \"petrov@aaa.ru\",\r\n        role: 'Сотрудник'\r\n    },\r\n    {\r\n        id: 6,\r\n        fullname: 'Генералов Алексей Иванович',\r\n        registered: '21.01.2021',\r\n        phone: '+7 (800) 555-35-35',\r\n        mail: \"generalov@aaa.ru\",\r\n        role: 'Нач. отдела'\r\n    },\r\n    {\r\n        id: 7,\r\n        fullname: 'Иванов Иван Иванович',\r\n        registered: '21.01.2021',\r\n        phone: '+7 (800) 555-35-35',\r\n        mail: \"ivanov@aaa.ru\",\r\n        role: 'Сотрудник'\r\n    },\r\n    {\r\n        id: 8,\r\n        fullname: 'Петров Петр Петрович',\r\n        registered: '21.01.2021',\r\n        phone: '+7 (800) 555-35-35',\r\n        mail: \"petrov@aaa.ru\",\r\n        role: 'Сотрудник',\r\n    },\r\n    {\r\n        id: 9,\r\n        fullname: 'Генералов Алексей Иванович',\r\n        registered: '21.01.2021',\r\n        phone: '+7 (800) 555-35-35',\r\n        mail: \"generalov@aaa.ru\",\r\n        role: 'Нач. отдела'\r\n    },\r\n]\r\n\r\nfunction Coworkers({ getUsers, usersList }) {\r\n    const classes = useStyles()\r\n    const [modalOpen, setModalOpen] = React.useState(false)\r\n    const [currentUser, setCurrentUser] = React.useState({})\r\n    React.useEffect( () => {   \r\n        let usersListAction = {\r\n          type: LIST_USERS,\r\n          endpoint: \"users/\",\r\n          data: {},\r\n        };\r\n        getUsers(usersListAction)\r\n    }, [])\r\n    \r\n    const handleClose = () => {\r\n        setModalOpen(false);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <div className={classes.headerWrapper}>\r\n                <Typography component=\"h1\" variant=\"h4\">\r\n                    Мои сотрудники\r\n                </Typography>\r\n            </div>\r\n        \r\n            <div className={classes.contentWrapper}>\r\n                <Paper className={classes.coworkerWrapper}>\r\n                    <div style={{display: \"flex\", justifyContent: \"flex-end\"}}>\r\n                        <TextField\r\n                            fullWidth\r\n                            placeholder=\"Поиск\"\r\n                            className={classes.searchField}\r\n                        />\r\n                    </div>\r\n                    <Table size=\"small\">\r\n                        <TableHead >\r\n                            <TableRow className={classes.usertableHead}>\r\n                                <TableCell>\r\n                                    Имя\r\n                                </TableCell>\r\n                                <TableCell>\r\n                                    Дата регистрации\r\n                                </TableCell>\r\n                                <TableCell>\r\n                                    Телефон\r\n                                </TableCell>\r\n                                <TableCell>\r\n                                    Почта\r\n                                </TableCell>\r\n                                <TableCell>\r\n                                    Роль\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        </TableHead>\r\n                        <TableBody>\r\n                            {usersList.map( user => (\r\n                                <TableRow key={user.id} hover onClick={() => {\r\n                                    setModalOpen(true)\r\n                                    setCurrentUser(user)\r\n                                    }} style={{cursor: \"pointer\"}}>\r\n                                    <TableCell>{`${user.firstname} ${user.lastname} ${user.patronym}`}</TableCell>\r\n                                    <TableCell>{user.registered}</TableCell>\r\n                                    <TableCell>{user.phone}</TableCell>\r\n                                    <TableCell>{user.mail}</TableCell>\r\n                                    <TableCell>{user.role}</TableCell>\r\n                                </TableRow>\r\n                            ))}\r\n                        </TableBody>\r\n                    </Table>\r\n                    <TablePagination\r\n                        component=\"div\"\r\n                        count={100}\r\n                        page={1}\r\n                        rowsPerPage={10}\r\n                        onChangeRowsPerPage={() => {}}\r\n                        onChangePage={() => {}}\r\n                    />\r\n                </Paper>\r\n            </div>\r\n            <ModalUserInfo open={modalOpen} onClose={handleClose} user={currentUser}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n      usersList: state.user.usersList\r\n    }\r\n  }\r\n  \r\n  function mapDispatchToProps(dispatch) {\r\n    return {\r\n      getUsers: (action: TODO) => dispatch(thunkData(action)),\r\n    };\r\n  }\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Coworkers)","C:\\Projects\\dealer_front\\src\\pages\\ProjectsList.tsx",["276"],"import React from 'react'\r\nimport ProjectOneByCard from \"../components/ProjectOneByCard\"\r\nimport Search from '../components/Search'\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport TablePagination from '@material-ui/core/TablePagination';\r\nimport ModalCommercialOffer from \"../components/ModalCommercialOffer\"\r\nimport { connect } from \"react-redux\";\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport MuiAlert, { AlertProps } from '@material-ui/lab/Alert';\r\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\r\nimport { setSuccess, unsetSuccess } from '../actions/app';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    pagination: {\r\n      \"& .MuiPaginationItem-root\": {\r\n        fontWeight: \"bolder\"\r\n      },\r\n      \"& .Mui-selected\": {\r\n        background: \"#688cbc\",\r\n        color: \"white\"\r\n      },\r\n      \"& .MuiPaginationItem-outlined:hover\": {\r\n        background: \"#e1edff\",\r\n        color: \"#688cbc\"\r\n      },\r\n        \r\n    },\r\n    subheaderWrapper: {\r\n      display: \"flex\",\r\n      width: \"100%\",\r\n      justifyContent: \"space-between\",\r\n      background: \"#e3ecf7\",\r\n      height: 120,\r\n      padding: 18\r\n    },\r\n    content: {\r\n      padding: \"16px\"\r\n    }\r\n  }),\r\n);\r\n\r\nfunction ProjectsList({ projectsList, app, unsetSuccess }) {\r\n  const [page, setPage] = React.useState(1)\r\n  const [modalOpen, setModalOpen] = React.useState(false)\r\n\r\n  const classes = useStyles()\r\n  \r\n  function modalOpenHandler(item) {\r\n    setModalOpen(true)\r\n  }\r\n\r\n  function Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n  }\r\n\r\n  return (\r\n      <div>\r\n        <div className={classes.subheaderWrapper}>\r\n          <Search />\r\n        </div>\r\n        <div className={classes.content}>\r\n          {projectsList.length !== 0 ? projectsList.map(item => \r\n          <ProjectOneByCard \r\n            item={item} \r\n            key={item.id}\r\n            modalOpenHandler={modalOpenHandler}\r\n          />) : <CircularProgress color=\"secondary\"/>}\r\n        </div>\r\n        <TablePagination\r\n          component=\"div\"\r\n          count={100}\r\n          page={page}\r\n          onChangePage={(e, page) => setPage(page)}\r\n          rowsPerPage={10}\r\n          onChangeRowsPerPage={(e) => console.log(e)}\r\n        />\r\n        <ModalCommercialOffer \r\n          open={modalOpen}\r\n          user={{}}\r\n          onClose={() => setModalOpen(false)}\r\n        />\r\n        <Snackbar open={app.projectSuccesfullyAdded} autoHideDuration={6000} onClose={() => unsetSuccess()}>\r\n          <Alert onClose={() => unsetSuccess()} severity=\"success\">\r\n            Проект успешно добавлен\r\n          </Alert>\r\n        </Snackbar>\r\n      </div>\r\n  )\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    projectsList: state.project.projectsList,\r\n    app: state.app\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n  unsetSuccess\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ProjectsList)","C:\\Projects\\dealer_front\\src\\pages\\User.tsx",["277","278","279","280","281","282","283"],"import React from 'react'\r\nimport TextField from '@material-ui/core/TextField'\r\nimport Paper from '@material-ui/core/Paper'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport Button from '@material-ui/core/Button'\r\nimport Switch from '@material-ui/core/Switch';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport { makeStyles, createStyles, Theme, withStyles } from '@material-ui/core/styles';\r\n\r\nimport ProjectOneByCard from '../components/ProjectOneByCard'\r\nimport ModalUserInfo from '../components/ModalUserInfo'\r\nimport ModalResetPassword from '../components/ModalResetPassword'\r\n\r\nimport { thunkAuth, thunkData } from \"../services/thunks\";\r\nimport { connect } from \"react-redux\";\r\nimport { LIST_PROJECTS } from \"../store/types\";\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    paper: {\r\n        margin: theme.spacing(1),\r\n        overflow: \"hidden\"\r\n    },\r\n    userHeader: {\r\n        width: \"100%\",\r\n        background: '#e3ecf7',\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        padding: theme.spacing(3),\r\n        color: \"#688cbc\",\r\n    },\r\n    userContainer: {\r\n        padding: theme.spacing(2),\r\n    },\r\n    buttonStyle: {\r\n        color: \"white\",\r\n        background: \"#688cbc\",\r\n        fontWeight: \"bolder\",\r\n        \"&:hover\": {\r\n            background: \"#688cbc\"\r\n        }\r\n    },\r\n    userProjectContainer: {\r\n        marginTop: 15,\r\n        padding: theme.spacing(2)\r\n    },\r\n    buttonContainer: {\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        alignItems: \"flex-end\"\r\n    },\r\n    tableCellName: {\r\n        fontWeight: \"bolder\", \r\n        color: \"#96999c\", \r\n        marginRight: 5\r\n    },\r\n    tableCellValue: {\r\n        fontWeight: \"bolder\", \r\n        color: \"#666b73\"\r\n    },\r\n    contentWrapper: {\r\n        padding: theme.spacing(2),\r\n    },\r\n  }),\r\n);\r\n\r\nfunction User({ getProjects, projectsList }) {\r\n    const [modalOpen, setModalOpen] = React.useState(false)\r\n    const [resetPasswordOpen, setResetPasswordOpen] = React.useState(false)\r\n    const classes = useStyles()\r\n\r\n    let projectListAction = {\r\n        type: LIST_PROJECTS,\r\n        endpoint: \"projects/\",\r\n        data: {},\r\n    };\r\n    const [user, setUser] = React.useState({\r\n        username: \"ivanov1984\",\r\n        name: 'Иванов',\r\n        surname: 'Иван',\r\n        patronym: \"Иванович\",\r\n        email: \"ivanov1984@aaa.ru\",\r\n        phone: \"+78005553535\",\r\n        canSeeProjects: true,\r\n        possibleDiscoint: \"30\",\r\n    })\r\n\r\n    React.useEffect( () => {\r\n        getProjects(projectListAction)\r\n        console.log('pr', projectsList)\r\n    }, [])\r\n    return (\r\n        <div>\r\n            <div className={classes.userHeader}>\r\n                <Typography component=\"h1\" variant=\"h4\">\r\n                    Мой кабинет\r\n                </Typography>\r\n                <Typography style={{marginBottom: \"2em\"}}>Информация о пользователе {user ? user.username : \"\"}</Typography>\r\n\r\n                <Grid container>\r\n                    <Grid item xs={12} lg={6}>\r\n                    <Table size=\"small\">\r\n                        <TableBody>\r\n                            <TableRow>\r\n                                <TableCell className={classes.tableCellName}>\r\n                                    Фамилия\r\n                                </TableCell>\r\n                                <TableCell className={classes.tableCellValue}>\r\n                                    Иванов\r\n                                </TableCell>\r\n                                <TableCell className={classes.tableCellName}>\r\n                                    Номер\r\n                                </TableCell>\r\n                                <TableCell className={classes.tableCellValue}>\r\n                                    +7 (800) 555-35-35\r\n                                </TableCell>\r\n                            </TableRow>\r\n                            <TableRow>\r\n                                <TableCell className={classes.tableCellName}>\r\n                                    Имя\r\n                                </TableCell>\r\n                                <TableCell className={classes.tableCellValue}>\r\n                                    Иван\r\n                                </TableCell>\r\n                                <TableCell className={classes.tableCellName}>\r\n                                    Почта\r\n                                </TableCell>\r\n                                <TableCell className={classes.tableCellValue}>\r\n                                    ivanov1984@aaa.ru\r\n                                </TableCell>\r\n                            </TableRow>\r\n                            <TableRow>\r\n                                <TableCell className={classes.tableCellName}>\r\n                                    Отчество\r\n                                </TableCell>\r\n                                <TableCell className={classes.tableCellValue}>\r\n                                    Иванович\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        </TableBody>\r\n                    </Table>\r\n                    </Grid>\r\n\r\n                    <Grid item xs={12} lg={6} className={classes.buttonContainer}>\r\n                        <Button \r\n                        variant=\"contained\" \r\n                        color=\"primary\" \r\n                        style={{ width: 200}}\r\n                        onClick={() => setResetPasswordOpen(true)}\r\n                        >\r\n                            Сбросить пароль\r\n                        </Button>\r\n                        <Button \r\n                        variant=\"contained\" \r\n                        color=\"primary\" \r\n                        style={{marginTop: 5, width: 200}} \r\n                        onClick={() => setModalOpen(true)}>\r\n                            Изменить\r\n                        </Button>\r\n                    </Grid>\r\n                </Grid>\r\n            </div>\r\n\r\n            <div className={classes.contentWrapper}>\r\n                <Typography\r\n                    component=\"h2\" \r\n                    variant=\"h5\"\r\n                    style={{color: \"#688cbc\", display: \"inline-block\", marginTop: 20, marginBottom: 10}}\r\n                >\r\n                    Проекты\r\n                </Typography>\r\n                {projectsList.map(item => <ProjectOneByCard item={item} />)}\r\n            </div>\r\n\r\n            <ModalUserInfo open={modalOpen} onClose={() => setModalOpen(false)} user={user}/>\r\n            <ModalResetPassword open={resetPasswordOpen} onClose={() => setResetPasswordOpen(false)} user={user}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n      projectsList: state.project.projectsList\r\n    }\r\n  }\r\n    \r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        getProjects: (action: TODO) => dispatch(thunkData(action)),\r\n    };\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(User)","C:\\Projects\\dealer_front\\src\\services\\thunks.ts",["284"],"import { Action } from \"redux\";\r\nimport { ThunkAction } from \"redux-thunk\";\r\nimport { AppState } from \"../store\";\r\n\r\nimport { login, checkAuth} from \"../middleware/api\";\r\nimport { signIn, signOut, setAuth } from \"../actions/auth\";\r\n\r\nimport { getData } from \"../middleware/api\";\r\nimport { listProjects } from \"../actions/project\";\r\nimport { listCategories, listTools } from \"../actions/tool\";\r\nimport { listUsers } from \"../actions/user\";\r\n\r\nimport {\r\n  ApiAction,\r\n  SIGN_IN,\r\n  SIGN_OUT,\r\n  LIST_PROJECTS,\r\n  LIST_TOOLS,\r\n  NEW_PROJECT,\r\n  LIST_CATEGORIES,\r\n  LIST_USERS,\r\n  AUTH_CHECK,\r\n} from \"../store/types\";\r\n\r\nexport const thunkAuth = (\r\n  apiAction?: ApiAction\r\n): ThunkAction<void, AppState, null, Action<string>> => async (dispatch) => {\r\n  let response;\r\n  const { type, endpoint, data } = apiAction;\r\n\r\n  response = data;\r\n  if (type === SIGN_IN) {\r\n    response = await login(endpoint, data);\r\n  }\r\n  if (type === AUTH_CHECK) {\r\n    response = await checkAuth();\r\n  }\r\n  dispatchSignIn(dispatch, type, response);\r\n};\r\n\r\nexport const thunkData = (\r\n  apiAction?: ApiAction\r\n): ThunkAction<void, AppState, null, Action<string>> => async (dispatch) => {\r\n  const { type, endpoint, data } = apiAction;\r\n  let response = data\r\n\r\n  if (type === LIST_PROJECTS) {\r\n    response = await getData(LIST_PROJECTS)\r\n  }\r\n  if (type === LIST_TOOLS) {\r\n    response = await getData(LIST_TOOLS)\r\n  }\r\n  if (type === NEW_PROJECT) {\r\n    response = await getData(NEW_PROJECT)\r\n  }\r\n  if (type === LIST_CATEGORIES) {\r\n    response = await getData(LIST_CATEGORIES)\r\n  }\r\n  if (type === LIST_USERS) {\r\n    response = await getData(LIST_USERS)\r\n    dispatchUser(dispatch, type, response)\r\n  }\r\n  dispatchListProject(dispatch, type, response)\r\n}\r\n\r\nfunction dispatchListProject(dispatch, type, response) {\r\n  switch (type) {\r\n    case LIST_PROJECTS:\r\n      dispatch(listProjects(response))\r\n      break;\r\n    case LIST_TOOLS:\r\n      dispatch(listTools(response))\r\n      break;\r\n    case LIST_CATEGORIES:\r\n      dispatch(listCategories(response))\r\n      break\r\n  }\r\n}\r\n\r\nfunction dispatchUser(dispatch, type, response) {\r\n  switch (type) {\r\n    case LIST_USERS:\r\n      dispatch(listUsers(response))\r\n      break\r\n  }\r\n}\r\n\r\nfunction dispatchSignIn(dispatch, type, response) {\r\n  switch (type) {\r\n    case SIGN_IN:\r\n      dispatch(signIn(response));\r\n      break;\r\n    case SIGN_OUT:\r\n      dispatch(signOut(response));\r\n      break;\r\n    case AUTH_CHECK:\r\n      dispatch(setAuth(response))\r\n      break\r\n  }\r\n}","C:\\Projects\\dealer_front\\src\\pages\\Project.tsx",["285","286","287"],"C:\\Projects\\dealer_front\\src\\layouts\\mainLayout.tsx",["288","289","290","291","292"],"import React, {useState} from 'react'\r\nimport clsx from 'clsx';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport List from '@material-ui/core/List';\r\nimport UserDropdown from '../components/UserDropdown'\r\nimport MainListItems from '../components/MenuItems';\r\nimport { layoutStyles } from './layoutStyles'\r\nimport '../css/index.css'\r\nimport { createStyles, makeStyles, useTheme, Theme } from '@material-ui/core/styles';\r\nimport { connect } from 'react-redux'\r\nimport { openSidebar, closeSidebar } from \"../actions/app\"\r\n\r\nconst drawerWidth = 230;\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      display: 'flex',\r\n    },\r\n    drawer: {\r\n      width: drawerWidth,\r\n      flexShrink: 0,\r\n      whiteSpace: 'nowrap',\r\n    },\r\n    drawerOpen: {\r\n      width: drawerWidth,\r\n      transition: theme.transitions.create('width', {\r\n        easing: theme.transitions.easing.sharp,\r\n        duration: theme.transitions.duration.enteringScreen,\r\n      }),\r\n    },\r\n    drawerClose: {\r\n      transition: theme.transitions.create('width', {\r\n        easing: theme.transitions.easing.sharp,\r\n        duration: theme.transitions.duration.leavingScreen,\r\n      }),\r\n      overflowX: 'hidden',\r\n      width: theme.spacing(7) + 1,\r\n      [theme.breakpoints.up('sm')]: {\r\n        width: theme.spacing(9) + 1,\r\n      },\r\n    },\r\n    logoContainer: {\r\n      display: \"flex\",\r\n      alignItems: \"center\",\r\n      justifyContent: \"center\",\r\n      width: \"100%\",\r\n      height: 120,\r\n      background: \"#f3f6f9\"\r\n    },\r\n    content: {\r\n      flexGrow: 1,\r\n      height: '100vh',\r\n      overflow: 'auto',\r\n      padding: 0\r\n    },\r\n  }),\r\n);\r\n\r\nfunction MainLayout({ children, openSidebar, closeSidebar, app }) {\r\n    const classes = useStyles();\r\n\r\n    React.useEffect(() => {\r\n      if ( window.location.pathname === \"/newoffer\" && app.sidebarOpened) {\r\n        app.sidebarOpened && closeSidebar()\r\n      } else {\r\n        !app.sidebarOpened && openSidebar()\r\n      }\r\n    }, [])\r\n\r\n\r\n    return (\r\n      <div className={classes.root}>\r\n\r\n        <CssBaseline />\r\n\r\n        <Drawer\r\n          variant=\"permanent\"\r\n          className={clsx(classes.drawer, {\r\n            [classes.drawerOpen]: app.sidebarOpened,\r\n            [classes.drawerClose]: !app.sidebarOpened,\r\n          })}\r\n          classes={{\r\n            paper: clsx({\r\n              [classes.drawerOpen]: app.sidebarOpened,\r\n              [classes.drawerClose]: !app.sidebarOpened,\r\n            }),\r\n          }}\r\n        >\r\n          <div className={classes.logoContainer}>\r\n            <img src=\"https://ds-med.ru/wp-content/uploads/2020/03/logoDS-1.png\" alt=\"...\" style={{width: \"80%\"}}/>\r\n          </div>\r\n          \r\n          {/* <UserDropdown />\r\n          <Divider /> */}\r\n          <List><MainListItems /></List>\r\n        </Drawer>\r\n\r\n        <main className={classes.content}>\r\n          {children}\r\n        </main>\r\n      </div>\r\n    );\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    app: state.app\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n  openSidebar,\r\n  closeSidebar\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(MainLayout)","C:\\Projects\\dealer_front\\src\\actions\\user.ts",[],"C:\\Projects\\dealer_front\\src\\actions\\tool.ts",[],"C:\\Projects\\dealer_front\\src\\actions\\app.ts",["293","294"],"import {\r\n    AppState,\r\n    SET_SUCCESS,\r\n    UNSET_SUCCESS,\r\n    SIDEBAR_OPENED,\r\n    SIDEBAR_CLOSED,\r\n    SET_ERROR\r\n} from '../store/types'\r\n\r\nexport function setSuccess() {\r\n    return {\r\n      type: SET_SUCCESS,\r\n    };\r\n}\r\n\r\nexport function unsetSuccess() {\r\n    return {\r\n      type: UNSET_SUCCESS,\r\n    };\r\n}\r\n\r\nexport function openSidebar() {\r\n    return {\r\n        type: SIDEBAR_OPENED\r\n    };\r\n}\r\n\r\nexport function closeSidebar() {\r\n    return {\r\n        type: SIDEBAR_CLOSED,\r\n    };\r\n}\r\n\r\nexport function getAction(\r\n    action,\r\n    data?: Object\r\n) {\r\n    switch (action) {\r\n        case SET_SUCCESS:\r\n            return {\r\n                type: SET_SUCCESS,\r\n                endpoint: 'app/'\r\n            }\r\n\r\n        case UNSET_SUCCESS:\r\n            return {\r\n                type: UNSET_SUCCESS,\r\n                endpoint: 'app/'\r\n            }\r\n    }\r\n}","C:\\Projects\\dealer_front\\src\\actions\\project.ts",[],"C:\\Projects\\dealer_front\\src\\actions\\auth.ts",[],"C:\\Projects\\dealer_front\\src\\middleware\\api.ts",[],"C:\\Projects\\dealer_front\\src\\components\\Slider.tsx",["295","296"],"import React from 'react';\r\nimport Carousel from 'react-material-ui-carousel'\r\nimport { Paper, Button, SliderClassKey, Typography } from '@material-ui/core'\r\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    paper: {\r\n      width: \"100vw\",\r\n      height: \"40vh\",\r\n      position: \"relative\"\r\n    },\r\n    sliderImage: {\r\n        maxWidth: \"100%\",\r\n        maxHeight: \"100%\",\r\n        position: \"absolute\"\r\n    }\r\n  }),\r\n);\r\n\r\nfunction Slider(props)\r\n{\r\n    var items = [\r\n        {\r\n            name: \"Рентген-аппараты\",\r\n            description: \"Скидка 40% при заказе до 30 января 2021 года!\",\r\n            image: \"https://ds-med.ru/wp-content/uploads/2020/05/listem-2.jpg\"\r\n        },\r\n        {\r\n            name: \"Мониторы пациента\",\r\n            description: \"Скидка 40% при заказе до 30 января 2021 года!\",\r\n            image: \"https://ds-med.ru/wp-content/uploads/2020/05/votem-2.jpg\"\r\n        }\r\n    ]\r\n\r\n    return (\r\n        <Carousel>\r\n            {\r\n                items.map( (item, i) => <Item key={i} item={item} /> )\r\n            }\r\n        </Carousel>\r\n    )\r\n}\r\n\r\nfunction Item(props) {\r\n    const classes = useStyles()\r\n    return (\r\n        <Paper className={classes.paper}>\r\n            <img src={props.item.image} alt=\"...\" className={classes.sliderImage}/>\r\n            <Button type=\"button\" variant=\"contained\" color=\"primary\">\r\n                Создать проект\r\n            </Button>\r\n        </Paper>\r\n    )\r\n}\r\n\r\nexport default Slider","C:\\Projects\\dealer_front\\src\\components\\CompanyCard.tsx",["297"],"import React from 'react';\r\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport ArrowRight from '../assets/icons/Chevron right circle.svg'\r\nimport IconButton from '@material-ui/core/IconButton';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      display: \"flex\",\r\n      flexDirection: \"row\",\r\n      justifyContent: \"space-between\",\r\n      marginBottom: theme.spacing(2),\r\n    },\r\n    tableCellName: {\r\n      fontWeight: \"bolder\", \r\n      color: \"#96999c\", \r\n      marginRight: 5\r\n    },\r\n    tableCellValue: {\r\n        fontWeight: \"bolder\", \r\n        color: \"#666b73\"\r\n    },\r\n    container: {\r\n      margin: theme.spacing(2),\r\n    }\r\n  }),\r\n);\r\n\r\nexport default function CompanyCard({company, setOpen, open, setCurrentCompany}) {\r\n  const classes = useStyles();\r\n  \r\n  const handleOpen = () => {\r\n    setCurrentCompany(company)\r\n    setOpen(true)\r\n  }\r\n\r\n  return (\r\n    <Paper className={classes.root}>\r\n      <Table size=\"small\" className={classes.container}>\r\n        <TableBody>\r\n          <TableRow>\r\n            <TableCell className={classes.tableCellName}>\r\n              Название\r\n            </TableCell>\r\n            <TableCell className={classes.tableCellValue}>\r\n              {company.name}\r\n            </TableCell>\r\n\r\n            <TableCell className={classes.tableCellName}>\r\n              Адрес\r\n            </TableCell>\r\n            <TableCell className={classes.tableCellValue}>\r\n              {company.address}\r\n            </TableCell>\r\n\r\n            <TableCell className={classes.tableCellName}>\r\n              ИНН\r\n            </TableCell>\r\n            <TableCell className={classes.tableCellValue}>\r\n              {company.inn}\r\n            </TableCell>\r\n          </TableRow>\r\n\r\n          <TableRow>\r\n            <TableCell className={classes.tableCellName}>\r\n              Короткое название\r\n            </TableCell>\r\n            <TableCell className={classes.tableCellValue}>\r\n              {company.shortname}\r\n            </TableCell>\r\n\r\n            <TableCell className={classes.tableCellName}>\r\n              Почтовый адрес\r\n            </TableCell>\r\n            <TableCell className={classes.tableCellValue}>\r\n              {company.postaddress}\r\n            </TableCell>\r\n\r\n            <TableCell className={classes.tableCellName}>\r\n              ОГРН\r\n            </TableCell>\r\n            <TableCell className={classes.tableCellValue}>\r\n              {company.ogrn}\r\n            </TableCell>\r\n          </TableRow>\r\n\r\n          <TableRow>\r\n            <TableCell className={classes.tableCellName}>\r\n              Правовая форма\r\n            </TableCell>\r\n            <TableCell className={classes.tableCellValue}>\r\n              {company.lawform}\r\n            </TableCell>\r\n\r\n            <TableCell className={classes.tableCellName}>\r\n              Телефон\r\n            </TableCell>\r\n            <TableCell className={classes.tableCellValue}>\r\n              {company.phone}\r\n            </TableCell>\r\n\r\n            <TableCell className={classes.tableCellName}>\r\n              Банковские реквизиты\r\n            </TableCell>\r\n            <TableCell className={classes.tableCellValue}>\r\n              {company.req}\r\n            </TableCell>\r\n          </TableRow>\r\n\r\n          <TableRow>\r\n            <TableCell className={classes.tableCellName}>\r\n              Директор\r\n            </TableCell>\r\n            <TableCell className={classes.tableCellValue}>\r\n              {company.director}\r\n            </TableCell>\r\n\r\n            <TableCell className={classes.tableCellName}>\r\n              Электронная почта\r\n            </TableCell>\r\n            <TableCell className={classes.tableCellValue}>\r\n              {company.email}\r\n            </TableCell>\r\n\r\n            <TableCell className={classes.tableCellName}>\r\n              Лицензии\r\n            </TableCell>\r\n            <TableCell className={classes.tableCellValue}>\r\n              {company.licenses}\r\n            </TableCell>\r\n          </TableRow>\r\n        </TableBody>\r\n      </Table>\r\n\r\n      <div style={{display: \"flex\", alignItems: \"center\", background: \"#f3f6f9\"}}>\r\n        <IconButton>\r\n          <img src={ArrowRight} onClick={handleOpen} style={{width: 50}}/>\r\n        </IconButton>\r\n      </div>\r\n      \r\n      {/* <ModalCompanyInfo company={company}/> */}\r\n    </Paper>\r\n  );\r\n}","C:\\Projects\\dealer_front\\src\\components\\Chart.tsx",["298","299","300","301"],"import React from 'react';\r\nimport { useTheme } from '@material-ui/core/styles';\r\nimport { \r\n  LineChart, \r\n  XAxis, \r\n  YAxis, \r\n  CartesianGrid, \r\n  Line, \r\n  ResponsiveContainer,\r\n  AreaChart, \r\n  Area,\r\n  Tooltip,\r\n  PieChart, \r\n  Pie, \r\n  Sector, \r\n  Cell,\r\n  Legend,\r\n  Bar,\r\n  ComposedChart\r\n } from 'recharts';\r\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { curveCardinal } from 'd3-shape';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    mainChart: {\r\n      width: \"100%\",\r\n      height: 300,\r\n      padding: theme.spacing(3)\r\n    }\r\n  }),\r\n);\r\n\r\nconst cardinal = curveCardinal.tension(0.2);\r\n\r\nfunction LineChartWrapper({data}) {\r\n  return (\r\n    <ResponsiveContainer>\r\n      <LineChart \r\n      data={data}\r\n      margin={{\r\n        top: 10, right: 30, left: 0, bottom: 0,\r\n      }}\r\n      >\r\n        <XAxis dataKey=\"name\"/>\r\n        <YAxis/>\r\n        <CartesianGrid stroke=\"#eee\" strokeDasharray=\"5 5\"/>\r\n        <Line type=\"monotone\" dataKey=\"uv\" stroke=\"rgb(104, 140, 188)\" />\r\n        <Line type=\"monotone\" dataKey=\"pv\" stroke=\"#82ca9d\" />\r\n      </LineChart>\r\n    </ResponsiveContainer>\r\n  )\r\n}\r\n\r\nfunction AreaChartWrapper({data}) {\r\n  return (\r\n    <ResponsiveContainer>\r\n      <AreaChart\r\n        data={data}\r\n        margin={{\r\n          top: 10, right: 30, left: 0, bottom: 0,\r\n        }}\r\n      >\r\n        <CartesianGrid strokeDasharray=\"3 3\" />\r\n        <XAxis dataKey=\"name\" />\r\n        <YAxis />\r\n        <Tooltip />\r\n        <Area type=\"monotone\" dataKey=\"uv\" stroke=\"rgb(104, 140, 188)\" fill=\"rgb(104, 140, 188)\" />\r\n      </AreaChart>\r\n    </ResponsiveContainer>\r\n  )\r\n}\r\n\r\nfunction ComposedChartWrapper({data}) {\r\n  return (\r\n    <ResponsiveContainer>\r\n      <ComposedChart\r\n        data={data}\r\n        margin={{\r\n          top: 20, right: 20, bottom: 20, left: 20,\r\n        }}\r\n      >\r\n        <CartesianGrid stroke=\"#f5f5f5\" />\r\n        <XAxis dataKey=\"name\" />\r\n        <YAxis />\r\n        <Tooltip />\r\n        <Legend />\r\n        <Bar dataKey=\"uv\" barSize={20} fill=\"rgb(104, 140, 188)\" />\r\n        <Line type=\"monotone\" dataKey=\"uv\" stroke=\"#ff7300\" />\r\n      </ComposedChart>\r\n    </ResponsiveContainer>\r\n  )\r\n}\r\n\r\nfunction PieChartWrapper({data}) {\r\n  const data01 = data.data01\r\n  const data02 = data.data02\r\n  return (\r\n    <ResponsiveContainer>\r\n      <PieChart>\r\n        <Pie dataKey=\"value\" isAnimationActive={false} data={data01} outerRadius={80} fill=\"rgb(104, 140, 188)\" label />\r\n        <Pie dataKey=\"value\" data={data02} innerRadius={40} outerRadius={80} fill=\"#82ca9d\" />\r\n        <Tooltip />\r\n      </PieChart>\r\n    </ResponsiveContainer>\r\n  );\r\n}\r\n\r\nfunction ChartRenderer({chartType, data}) {\r\n  switch(chartType) {\r\n    case 'line':\r\n      return <LineChartWrapper data={data}/>\r\n    case 'area':\r\n      return <AreaChartWrapper data={data}/>\r\n    case 'pie':\r\n      return <PieChartWrapper data={data}/>\r\n    case 'composed':\r\n      return <ComposedChartWrapper data={data}/>\r\n    default: return null\r\n  }\r\n}\r\n\r\nexport default function Chart({header, chartType, data}) {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div className={classes.mainChart}>\r\n      <Typography variant=\"h5\" align=\"center\">\r\n        {header}\r\n      </Typography>\r\n      <ChartRenderer data={data} chartType={chartType}/>\r\n    </div>\r\n  );\r\n}","C:\\Projects\\dealer_front\\src\\components\\ComOffer.tsx",["302"],"import React from 'react'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport CommercialOfferOne from \"./CommercialOfferOne\"\r\nimport Tabs from '@material-ui/core/Tabs';\r\nimport Tab from '@material-ui/core/Tab';\r\nimport Box from '@material-ui/core/Box';\r\nimport FixedCalcBottom from './FixedCalcBottom'\r\n\r\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    paper: {\r\n        marginRight: 10,\r\n        padding: theme.spacing(1),\r\n        // border: \"2px solid rgb(104, 140, 188)\",\r\n        borderRadius: 10,\r\n        height: \"100%\"\r\n    }\r\n  }),\r\n);\r\n\r\nfunction ComOffer({authorised}) {\r\n    const classes = useStyles();\r\n    const [addedTools, setAddedTools] = React.useState([])\r\n    const [offersTree, setOffersTree] = React.useState([])\r\n    const [positionsCount, setPositionsCount] = React.useState(0)\r\n    const [positionsPrice, setPositionsPrice] = React.useState(0)\r\n    const [positionsTree, setPositionsTree] = React.useState([])\r\n    const [activeTab, setActiveTab] = React.useState(0);\r\n\r\n    React.useEffect(() => {\r\n      if (authorised && authorised.length !== 0) {\r\n        setPositionsTree(authorisedPositionsTreeBuilding(authorised))\r\n      }\r\n    }, [authorised])\r\n\r\n    React.useEffect(() => {\r\n      setOffersTree(commercialOfferTreeBuilding(addedTools))\r\n      setPositionsCount(addedTools.length)\r\n      setPositionsPrice(totalClientPriceCalculating(addedTools))\r\n    }, [addedTools])\r\n\r\n    React.useEffect(() => {\r\n      if (positionsTree.length !== 0) {\r\n        positionsTree.forEach( tool => positionSelectHandler(tool) )\r\n      }\r\n    }, [positionsTree])\r\n\r\n    // функция строит дерево авторизованных позиций, O(n^2)\r\n    function authorisedPositionsTreeBuilding(arr: Array<any>) {\r\n      let tree = []\r\n      arr.forEach( item => {\r\n        if (item.parent === null) {\r\n          item.children = arr.filter( elem => elem.parent === item.id)\r\n          tree.push(item)\r\n        }\r\n      })\r\n      return tree\r\n    }\r\n\r\n    function positionSelectHandler(item) {\r\n      let currentTools = addedTools.splice(0)\r\n      const isOfferExist = currentTools.find( elem => elem.id === item.id)\r\n      if(!isOfferExist) {\r\n        let {children, ...handledItem} = item\r\n        handledItem.uid = Date.now()\r\n        currentTools.push(handledItem)\r\n        setAddedTools(currentTools)\r\n      }\r\n    }\r\n\r\n    function deleteTool(uid, id) {\r\n      const currentTools = addedTools.splice(0)\r\n      console.log('called by', uid)\r\n      console.log('currentTools', currentTools)\r\n      const newTools = currentTools.filter(elem => elem.uid !== uid && elem.parent !== id)\r\n      setAddedTools(newTools)\r\n    }\r\n\r\n    function commercialOfferTreeBuilding(arr: Array<any>) {\r\n      let tree = []\r\n      arr.forEach( item => {\r\n        if (item.parent === null) {\r\n          item.children = arr.filter( elem => elem.parent === item.id)\r\n          tree.push(item)\r\n        } else {\r\n          const parent = arr.find( elem => item.parent === elem.id)\r\n          if (!parent) {\r\n            tree.push(item)\r\n          }\r\n        }\r\n      })\r\n      return tree\r\n    }\r\n\r\n    function totalClientPriceCalculating(arr) {\r\n      if (arr.length >= 2) {\r\n        let initialValue = 0\r\n        return arr.reduce((accumulator, currentValue) => +accumulator + +currentValue.price, initialValue);\r\n        \r\n      } else {\r\n        if (arr.length === 1) {\r\n          return arr[0].price\r\n        }\r\n      }\r\n      return 0\r\n    }\r\n\r\n    function TabPanel(props) {\r\n      const { children, value, index, ...other } = props;\r\n    \r\n      return (\r\n        <div\r\n          role=\"tabpanel\"\r\n          hidden={value !== index}\r\n          id={`wrapped-tabpanel-${index}`}\r\n          aria-labelledby={`wrapped-tab-${index}`}\r\n          {...other}\r\n        >\r\n          {value === index && (\r\n            <Box>\r\n              <Typography>{children}</Typography>\r\n            </Box>\r\n          )}\r\n        </div>\r\n      );\r\n    }\r\n  \r\n    function a11yProps(index) {\r\n      return {\r\n        id: `wrapped-tab-${index}`,\r\n        'aria-controls': `wrapped-tabpanel-${index}`,\r\n      };\r\n    }\r\n\r\n    return (\r\n        <div className={classes.paper}>\r\n            <Typography\r\n                component=\"h2\" \r\n                variant=\"h5\"\r\n                style={{color: \"#688cbc\", display: \"inline-block\", marginTop: 20, marginBottom: 10}}\r\n            >\r\n              Структура коммерческого предложения\r\n            </Typography>\r\n\r\n            <Tabs\r\n            indicatorColor=\"primary\"\r\n            textColor=\"primary\"\r\n            aria-label=\"disabled tabs example\"\r\n            value={activeTab}\r\n            onChange={(e, newValue) => setActiveTab(newValue)}\r\n            >\r\n              <Tab label=\"Коммерческое предложение\" {...a11yProps(0)}/>\r\n              <Tab label=\"Рекомендованные\" {...a11yProps(1)}/>\r\n            </Tabs>\r\n\r\n            <TabPanel value={activeTab} index={0}>\r\n            {offersTree && offersTree.length !== 0 ? offersTree.map( tool => \r\n              <CommercialOfferOne\r\n              key={tool.id}\r\n              deleteTool={deleteTool}\r\n              offers={tool}\r\n              addedTools={addedTools}\r\n              setAddedTools={setAddedTools}\r\n              />) : <Typography>Не добавлено ни одной позиции</Typography>}\r\n            </TabPanel>\r\n\r\n            <TabPanel value={activeTab} index={1}>\r\n              Здесь будут рекомендованные позиции по выбраным из авторизованных\r\n            </TabPanel>\r\n\r\n            {activeTab === 0 ? <FixedCalcBottom positionsCount={positionsCount} positionsPrice={positionsPrice} addedTools={addedTools}/> : null}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ComOffer","C:\\Projects\\dealer_front\\src\\components\\ModalResetPassword.tsx",["303","304","305","306","307","308","309","310"],"import React from 'react';\r\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Switch from '@material-ui/core/Switch';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport CloseIcon from '../assets/icons/Close circle.svg'\r\nimport { Typography } from '@material-ui/core';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n        \"&.MuiDialog-root\": {\r\n            backdropFilter: \"blur(5px)\",\r\n            background: \"rgba(104, 140, 188, 0.4) !important\"\r\n        },\r\n    },\r\n    containerRoot: {\r\n      padding: theme.spacing(2),\r\n    },\r\n    tableCellName: {\r\n      fontWeight: \"bolder\", \r\n      color: \"#96999c\", \r\n      marginRight: 5\r\n    },\r\n    tableCellValue: {\r\n        fontWeight: \"bolder\", \r\n        color: \"#666b73\"\r\n    },\r\n    headerStyle: {\r\n        background: theme.palette.secondary.main,\r\n        color: theme.palette.primary.main,\r\n        display: \"flex\",\r\n        justifyContent: \"space-between\",\r\n        alignItems: \"center\"\r\n    },\r\n    deleteButton: {\r\n        marginRight: 10, \r\n        background: theme.palette.error.main, \r\n        color: \"white\",\r\n        \"&:hover\": {\r\n            background: theme.palette.error.dark\r\n        }\r\n    }\r\n  }),\r\n);\r\n\r\nexport default function ResetPassword({onClose, open, user}) {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <Dialog onClose={onClose} aria-labelledby=\"simple-dialog-title\" open={open} className={classes.root} fullWidth maxWidth=\"sm\">\r\n            <DialogTitle id=\"simple-dialog-title\" className={classes.headerStyle} disableTypography>\r\n                <Typography variant=\"h5\">\r\n                    Сбросить пароль\r\n                </Typography>\r\n                \r\n                <IconButton onClick={() => onClose()} style={{marginRight: \"-16px\"}}>\r\n                    <img src={CloseIcon} />\r\n                </IconButton>\r\n            </DialogTitle>\r\n            <div className={classes.containerRoot}>\r\n                <div style={{display: \"flex\", flexDirection: \"column\"}}>\r\n       \r\n                </div>\r\n\r\n                <div style={{textAlign: \"right\", marginTop: \"2em\"}}>\r\n                    <Button type=\"button\" variant=\"contained\" className={classes.deleteButton}>\r\n                        Удалить\r\n                    </Button>\r\n                    <Button type=\"button\" variant=\"contained\" color=\"primary\" style={{marginRight: 10}}>\r\n                        Сохранить\r\n                    </Button>\r\n                </div>\r\n            </div>\r\n        </Dialog>\r\n    );\r\n}","C:\\Projects\\dealer_front\\src\\components\\Configurator.tsx",["311","312"],"import React from 'react'\r\nimport Paper from '@material-ui/core/Paper'\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardHeader from '@material-ui/core/CardHeader';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport clsx from 'clsx';\r\n\r\nimport Collapse from '@material-ui/core/Collapse';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport { red } from '@material-ui/core/colors';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\r\n\r\nimport Accordion from '@material-ui/core/Accordion';\r\nimport AccordionSummary from '@material-ui/core/AccordionSummary';\r\nimport AccordionDetails from '@material-ui/core/AccordionDetails';\r\n\r\nimport Select from '@material-ui/core/Select';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\n\r\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    paper: {\r\n      marginRight: theme.spacing(1),\r\n      padding: theme.spacing(1),\r\n      flexDirection: \"column\",\r\n    },\r\n    directionStyle: {\r\n      minWidth: 275,\r\n      background: '#D4E4F2',\r\n      margin: 5\r\n    },\r\n    toolStyle: {\r\n      minWidth: 275,\r\n      background: '#DAEAD9',\r\n      margin: 5,\r\n      height: \"100%\"\r\n    },\r\n    selectedToolStyle: {\r\n      background: \"#D8CEDF\"\r\n    },\r\n    addingStyle: {\r\n      minWidth: 275,\r\n      background: \"#F2CEAA\",\r\n      margin: 5,\r\n      height: \"100%\"\r\n    },\r\n    bullet: {\r\n      display: 'inline-block',\r\n      margin: '0 2px',\r\n      transform: 'scale(0.8)',\r\n    },\r\n    title: {\r\n      fontSize: 14,\r\n    },\r\n    pos: {\r\n      marginBottom: 12,\r\n    },\r\n    directionsContainer: {\r\n      display: \"flex\",\r\n      flexDirection: \"column\",\r\n      overflow: \"hidden\"\r\n    },\r\n    toolsContainer: {\r\n      display: \"flex\",\r\n      flexDirection: \"column\"\r\n    },\r\n    addingsContainerHeader: {\r\n      background: \"#D8CEDF\"\r\n    },\r\n    addingsContainer: {\r\n      background: \"#D8CEDF\",\r\n      display: \"flex\",\r\n      flexDirection: \"column\",\r\n      overflow: \"hidden\"\r\n    },\r\n    media: {\r\n      height: 0,\r\n      paddingTop: '56.25%', // 16:9\r\n    },\r\n    selectedMedia: {\r\n      height: 300,\r\n      paddingTop: '56.25%', // 16:9\r\n    },\r\n    expand: {\r\n      transform: 'rotate(0deg)',\r\n      marginLeft: 'auto',\r\n      transition: theme.transitions.create('transform', {\r\n        duration: theme.transitions.duration.shortest,\r\n      }),\r\n    },\r\n    expandOpen: {\r\n      transform: 'rotate(180deg)',\r\n    },\r\n    avatar: {\r\n      backgroundColor: red[500],\r\n    },\r\n    selectedPositionImg: {\r\n      height: 300\r\n    }\r\n  }),\r\n);\r\n\r\nfunction Configurator() {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <div className={classes.paper}>\r\n            <Typography\r\n                component=\"h2\" \r\n                variant=\"h5\"\r\n                style={{color: \"#688cbc\", display: \"inline-block\", marginTop: 20, marginBottom: 10}}\r\n            >\r\n                Авторизованное оборудование\r\n            </Typography>\r\n            <AuthTools />\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nfunction AuthTools() {\r\n    const classes = useStyles();\r\n    return (\r\n      <Accordion>\r\n          <AccordionSummary\r\n          expandIcon={<ExpandMoreIcon />}\r\n          aria-controls=\"panel1a-content\"\r\n          id=\"panel1a-header\"\r\n          >\r\n            <Typography\r\n                component=\"h2\" \r\n                variant=\"h6\"\r\n                style={{color: \"#688cbc\", display: \"inline-block\"}}\r\n            >\r\n              Мониторы пациента\r\n            </Typography>\r\n          </AccordionSummary>\r\n          <AccordionDetails className={classes.toolsContainer}>\r\n            <Grid container spacing={2}>\r\n                <Grid item xs={12}>\r\n                    <ToolCard\r\n                    toolName={'Центральная станция мониторинга Votem VC-2000'}\r\n                    selected={true}\r\n                    img=\"https://ds-med.ru/wp-content/uploads/2020/04/votem_station.jpg\"\r\n                    description=\"VC-2000 позволяет вести наблюдение за жизненно важными функциями пациента в режиме реального времени, отображая числовые данные и графики волн, передаваемые от мониторов серии VP.\"\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={4}>\r\n                    <ToolCard\r\n                    toolName={'Многофункциональный монитор пациента Votem VP-1200'}\r\n                    selected={false}\r\n                    img=\"https://ds-med.ru/wp-content/uploads/2019/05/votem_1200.jpg\"\r\n                    description=\"Монитор пациента VP-1200 компании VOTEM (Южная Корея) — модель с расширенными функциональными возможностями. Диагональ экрана составляет 12,1 дюйма. Опционально доступны функции мультигаз, оценки глубины наркоза и капнометрии EtCO2. Низкая стоимость комплектующих делает VP-1200 экономически выгодным решением при регулярном проведении оценки глубины анестезии.\"\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={4}>\r\n                    <ToolCard\r\n                    toolName={'Многофункциональный монитор пациента Votem VP-1000'}\r\n                    selected={false}\r\n                    img=\"https://ds-med.ru/wp-content/uploads/2019/05/VP-1000-3.jpg\"\r\n                    description=\"Монитор пациента VP-1000 - продвинутая модель в линейке мониторов VOTEM (Южная Корея). Имеет диагональ 10,4 дюйма. Опционально доступны функции капнометрии EtCO2 и сердечного выброса. Широкий функционал и оптимальная цена делает VP-1000 популярным выбором среди отделений реанимации и интенсивной терапии. Мониторы пациента VotemМониторы пациента Votem\"\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={4}>\r\n                    <ToolCard\r\n                    toolName={'Многофункциональный монитор пациента Votem VP-1000'}\r\n                    selected={false}\r\n                    img=\"https://ds-med.ru/wp-content/uploads/2019/05/VP-1000-3.jpg\"\r\n                    description=\"Монитор пациента VP-1000 - продвинутая модель в линейке мониторов VOTEM (Южная Корея). Имеет диагональ 10,4 дюйма. Опционально доступны функции капнометрии EtCO2 и сердечного выброса. Широкий функционал и оптимальная цена делает VP-1000 популярным выбором среди отделений реанимации и интенсивной терапии. Мониторы пациента VotemМониторы пациента Votem\"\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={4}>\r\n                    <ToolCard\r\n                    toolName={'Многофункциональный монитор пациента Votem VP-1000'}\r\n                    selected={false}\r\n                    img=\"https://ds-med.ru/wp-content/uploads/2019/05/VP-1000-3.jpg\"\r\n                    description=\"Монитор пациента VP-1000 - продвинутая модель в линейке мониторов VOTEM (Южная Корея). Имеет диагональ 10,4 дюйма. Опционально доступны функции капнометрии EtCO2 и сердечного выброса. Широкий функционал и оптимальная цена делает VP-1000 популярным выбором среди отделений реанимации и интенсивной терапии. Мониторы пациента VotemМониторы пациента Votem\"\r\n                    />\r\n                </Grid>\r\n            </Grid>\r\n          </AccordionDetails>\r\n      </Accordion>\r\n    )\r\n}\r\n\r\nfunction AddingCard({toolName, img, description}) {\r\n  const classes = useStyles();\r\n  const [expanded, setExpanded] = React.useState(false);\r\n\r\n  const handleExpandClick = () => {\r\n    setExpanded(!expanded);\r\n  };\r\n\r\n  return (\r\n    <Card className={classes.addingStyle}>\r\n      <CardHeader\r\n        action={\r\n          <IconButton aria-label=\"settings\">\r\n            <MoreVertIcon />\r\n          </IconButton>\r\n        }\r\n        title={toolName}\r\n        subheader=\"+ 1000 $\"\r\n      />\r\n      <CardMedia\r\n        className={classes.media}\r\n        image={img}\r\n        title=\"Paella dish\"\r\n      />\r\n      <CardActions disableSpacing>\r\n        <Button variant=\"contained\" color=\"secondary\">В доп.</Button>\r\n        <Button variant=\"contained\" color=\"secondary\" style={{marginLeft: 10}}>В рекомендованное</Button>\r\n        <IconButton\r\n          className={clsx(classes.expand, {\r\n            [classes.expandOpen]: expanded,\r\n          })}\r\n          onClick={handleExpandClick}\r\n          aria-expanded={expanded}\r\n          aria-label=\"show more\"\r\n        >\r\n          <ExpandMoreIcon />\r\n        </IconButton>\r\n      </CardActions>\r\n      <Collapse in={expanded} timeout=\"auto\" unmountOnExit>\r\n        <CardContent>\r\n          <Typography paragraph>Характеристики</Typography>\r\n          <Typography paragraph>\r\n            {description}\r\n          </Typography>\r\n        </CardContent>\r\n      </Collapse>\r\n    </Card>\r\n  );\r\n}\r\n\r\nfunction ToolCard({toolName, img, description, selected}) {\r\n    const classes = useStyles();\r\n    const [expanded, setExpanded] = React.useState(false);\r\n  \r\n    const handleExpandClick = () => {\r\n      setExpanded(!expanded);\r\n    };\r\n\r\n    return (\r\n      <Card className={selected ? classes.selectedToolStyle : classes.toolStyle}>\r\n        <CardHeader\r\n          action={\r\n            <IconButton aria-label=\"settings\">\r\n              <MoreVertIcon />\r\n            </IconButton>\r\n          }\r\n          title={toolName}\r\n          subheader=\"10 000 $\"\r\n        />\r\n        {!selected ? <CardMedia\r\n          className={classes.media}\r\n          image={img}\r\n          title=\"Paella dish\"\r\n        /> :\r\n        <img src={img} className={classes.selectedPositionImg}/>}\r\n        <CardActions disableSpacing>\r\n          {selected ? <Button variant=\"contained\" color=\"secondary\">Удалить</Button> : <Button variant=\"contained\" color=\"secondary\">Выбрать</Button>}\r\n          {selected ? (\r\n            <Select\r\n            labelId=\"demo-simple-select-label\"\r\n            id=\"demo-simple-select\"\r\n            value=\"0\"\r\n            style={{\r\n              marginLeft: 10\r\n            }}\r\n            >\r\n              <MenuItem value={0}>Комплектация 1</MenuItem>\r\n              <MenuItem value={1}>Комплектация 2</MenuItem>\r\n              <MenuItem value={2}>Комплектация 3</MenuItem>\r\n            </Select>\r\n          ) : null}\r\n          <IconButton\r\n            className={clsx(classes.expand, {\r\n              [classes.expandOpen]: expanded,\r\n            })}\r\n            onClick={handleExpandClick}\r\n            aria-expanded={expanded}\r\n            aria-label=\"show more\"\r\n          >\r\n            <ExpandMoreIcon />\r\n          </IconButton>\r\n        </CardActions>\r\n        <Collapse in={expanded} timeout=\"auto\" unmountOnExit>\r\n          <CardContent>\r\n            {selected ? <Typography variant=\"h6\" component=\"h2\">Дополнительное оборудование</Typography> : <Typography variant=\"h6\" component=\"h2\">Характеристики</Typography>}\r\n            <Typography paragraph>\r\n              {selected ? (\r\n                <>\r\n                  <Typography variant=\"h6\" component=\"h2\">Манжеты</Typography>\r\n                  <Grid container spacing={2}>\r\n                      <Grid item xs={6}>\r\n                          <AddingCard\r\n                          toolName={'Манжета для НИАД (манжета взрослая, одноразовая (25-17))'}\r\n                          img=\"https://ds-med.ru/wp-content/uploads/2020/04/votem_station.jpg\"\r\n                          description=\"VC-2000 позволяет вести наблюдение за жизненно важными функциями пациента в режиме реального времени, отображая числовые данные и графики волн, передаваемые от мониторов серии VP.\"\r\n                          />\r\n                      </Grid>\r\n                      <Grid item xs={6}>\r\n                          <AddingCard\r\n                          toolName={'Манжета для НИАД (манжета детская, одноразовая (22-15))'}\r\n                          img=\"https://ds-med.ru/wp-content/uploads/2020/04/votem_station.jpg\"\r\n                          description=\"VC-2000 позволяет вести наблюдение за жизненно важными функциями пациента в режиме реального времени, отображая числовые данные и графики волн, передаваемые от мониторов серии VP.\"\r\n                          />\r\n                      </Grid>\r\n                      <Grid item xs={6}>\r\n                          <AddingCard\r\n                          toolName={'Манжета для НИАД (манжета неонатальная, одноразовая (15-8,9))'}\r\n                          img=\"https://ds-med.ru/wp-content/uploads/2020/04/votem_station.jpg\"\r\n                          description=\"VC-2000 позволяет вести наблюдение за жизненно важными функциями пациента в режиме реального времени, отображая числовые данные и графики волн, передаваемые от мониторов серии VP.\"\r\n                          />\r\n                      </Grid>\r\n                  </Grid>\r\n\r\n                  <Typography variant=\"h6\" component=\"h2\">Датчики</Typography>\r\n                  <Grid container spacing={2}>\r\n                      <Grid item xs={6}>\r\n                          <AddingCard\r\n                          toolName={'Датчик пульсоксиметрии напалечный (SpO2: (кабель + датчик на палец) для взрослых)'}\r\n                          img=\"https://ds-med.ru/wp-content/uploads/2020/04/votem_station.jpg\"\r\n                          description=\"VC-2000 позволяет вести наблюдение за жизненно важными функциями пациента в режиме реального времени, отображая числовые данные и графики волн, передаваемые от мониторов серии VP.\"\r\n                          />\r\n                      </Grid>\r\n                      <Grid item xs={6}>\r\n                          <AddingCard\r\n                          toolName={'Датчик пульсоксиметрии напалечный (SpO2: (кабель + датчик на палец) для детей)'}\r\n                          img=\"https://ds-med.ru/wp-content/uploads/2020/04/votem_station.jpg\"\r\n                          description=\"VC-2000 позволяет вести наблюдение за жизненно важными функциями пациента в режиме реального времени, отображая числовые данные и графики волн, передаваемые от мониторов серии VP.\"\r\n                          />\r\n                      </Grid>\r\n                      <Grid item xs={6}>\r\n                          <AddingCard\r\n                          toolName={'Датчик пульсоксиметрии SpO2: (кабель + датчик ректальный)'}\r\n                          img=\"https://ds-med.ru/wp-content/uploads/2020/04/votem_station.jpg\"\r\n                          description=\"VC-2000 позволяет вести наблюдение за жизненно важными функциями пациента в режиме реального времени, отображая числовые данные и графики волн, передаваемые от мониторов серии VP.\"\r\n                          />\r\n                      </Grid>\r\n                      <Grid item xs={6}>\r\n                          <AddingCard\r\n                          toolName={'Датчик пульсоксиметрии SpO2: (кабель + датчик на ухо) '}\r\n                          img=\"https://ds-med.ru/wp-content/uploads/2020/04/votem_station.jpg\"\r\n                          description=\"VC-2000 позволяет вести наблюдение за жизненно важными функциями пациента в режиме реального времени, отображая числовые данные и графики волн, передаваемые от мониторов серии VP.\"\r\n                          />\r\n                      </Grid>\r\n                  </Grid>\r\n                </>\r\n              ): description}\r\n            </Typography>\r\n          </CardContent>\r\n        </Collapse>\r\n      </Card>\r\n    );\r\n}\r\n\r\nexport default Configurator","C:\\Projects\\dealer_front\\src\\components\\ModalCompanyInfo.tsx",["313","314","315"],"import React from 'react';\r\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport CloseIcon from '../assets/icons/Close circle.svg'\r\nimport Typography from '@material-ui/core/Typography';\r\nimport CompanyCard from './CompanyCard';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      \"&.MuiDialog-root\": {\r\n          backdropFilter: \"blur(5px)\",\r\n          background: \"rgba(104, 140, 188, 0.2)\"\r\n      }\r\n    },\r\n    containerRoot: {\r\n      padding: theme.spacing(2)\r\n    },\r\n    tableCellName: {\r\n      fontWeight: \"bolder\", \r\n      color: \"#96999c\", \r\n      marginRight: 5,\r\n      width: 100\r\n    },\r\n    tableCellValue: {\r\n        fontWeight: \"bolder\", \r\n        color: \"#666b73\"\r\n    },\r\n    headerStyle: {\r\n      background: theme.palette.secondary.main,\r\n      color: theme.palette.primary.main,\r\n      display: \"flex\",\r\n      justifyContent: \"space-between\",\r\n      alignItems: \"center\"\r\n    },\r\n    deleteButton: {\r\n        marginRight: 10, \r\n        background: theme.palette.error.main, \r\n        color: \"white\",\r\n        \"&:hover\": {\r\n            background: theme.palette.error.dark\r\n        }\r\n    }\r\n  }),\r\n);\r\n\r\nexport default function ModalCompanyInfo({open, setOpen, company}) {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Dialog onClose={() => setOpen(!open)} aria-labelledby=\"simple-dialog-title\" open={open} className={classes.root} fullWidth maxWidth=\"md\">\r\n      <DialogTitle id=\"simple-dialog-title\" className={classes.headerStyle} disableTypography>\r\n        <Typography variant=\"h5\">\r\n            Подробнее о компании\r\n        </Typography>\r\n        \r\n        <IconButton onClick={() => setOpen(!open)} style={{marginRight: \"-32px\", marginTop: \"-31px\"}}>\r\n            <img src={CloseIcon} />\r\n        </IconButton>\r\n      </DialogTitle>\r\n      <div className={classes.containerRoot}>\r\n        <img style={{maxWidth: \"100px\"}} src={company.logo}/>\r\n        <Table size=\"small\">\r\n          <TableBody>\r\n            <TableRow>\r\n              <TableCell className={classes.tableCellName}>\r\n                Название\r\n              </TableCell>\r\n              <TableCell className={classes.tableCellValue}>\r\n                <TextField \r\n                  value={company.name}\r\n                  fullWidth\r\n                />\r\n              </TableCell>\r\n            </TableRow>\r\n\r\n            <TableRow>           \r\n              <TableCell className={classes.tableCellName}>\r\n                Адрес\r\n              </TableCell>\r\n              <TableCell className={classes.tableCellValue}>\r\n                <TextField \r\n                  value={company.address}\r\n                  fullWidth\r\n                />\r\n              </TableCell>\r\n            </TableRow>\r\n\r\n            <TableRow>\r\n              <TableCell className={classes.tableCellName}>\r\n                ИНН\r\n              </TableCell>\r\n              <TableCell className={classes.tableCellValue}>\r\n                <TextField \r\n                  value={company.inn}\r\n                  fullWidth\r\n                />                \r\n              </TableCell>\r\n            </TableRow>\r\n\r\n            <TableRow>\r\n              <TableCell className={classes.tableCellName}>\r\n                Короткое название\r\n              </TableCell>\r\n              <TableCell className={classes.tableCellValue}>\r\n                <TextField \r\n                  value={company.shortname}\r\n                  fullWidth\r\n                />  \r\n              </TableCell>\r\n            </TableRow>\r\n\r\n            <TableRow>            \r\n              <TableCell className={classes.tableCellName}>\r\n                Почтовый адрес\r\n              </TableCell>\r\n              <TableCell className={classes.tableCellValue}>\r\n                <TextField \r\n                  value={company.postaddress}\r\n                  fullWidth\r\n                />  \r\n              </TableCell>\r\n            </TableRow>\r\n\r\n            <TableRow>\r\n              <TableCell className={classes.tableCellName}>\r\n                ОГРН\r\n              </TableCell>\r\n              <TableCell className={classes.tableCellValue}>         \r\n                <TextField \r\n                  value={company.ogrn}\r\n                  fullWidth\r\n                /> \r\n              </TableCell>\r\n            </TableRow>\r\n\r\n            <TableRow>\r\n              <TableCell className={classes.tableCellName}>\r\n                Правовая форма\r\n              </TableCell>\r\n              <TableCell className={classes.tableCellValue}>\r\n                <TextField \r\n                  value={company.lawform}\r\n                  fullWidth\r\n                /> \r\n              </TableCell>\r\n            </TableRow>\r\n\r\n            <TableRow>            \r\n              <TableCell className={classes.tableCellName}>\r\n                Телефон\r\n              </TableCell>\r\n              <TableCell className={classes.tableCellValue}>\r\n                <TextField \r\n                  value={company.phone}\r\n                  fullWidth\r\n                /> \r\n              </TableCell>\r\n            </TableRow>\r\n\r\n            <TableRow>\r\n              <TableCell className={classes.tableCellName}>\r\n                Банковские реквизиты\r\n              </TableCell>\r\n              <TableCell className={classes.tableCellValue}>\r\n                <TextField \r\n                  value={company.req}\r\n                  fullWidth\r\n                /> \r\n              </TableCell>\r\n            </TableRow>\r\n\r\n            <TableRow>\r\n              <TableCell className={classes.tableCellName}>\r\n                Директор\r\n              </TableCell>\r\n              <TableCell className={classes.tableCellValue}>\r\n                <TextField \r\n                  value={company.director}\r\n                  fullWidth\r\n                /> \r\n              </TableCell>\r\n            </TableRow>\r\n\r\n            <TableRow>\r\n              <TableCell className={classes.tableCellName}>\r\n                Электронная почта\r\n              </TableCell>\r\n              <TableCell className={classes.tableCellValue}>        \r\n                <TextField \r\n                  value={company.email}\r\n                  fullWidth\r\n                /> \r\n              </TableCell>\r\n            </TableRow>\r\n\r\n            <TableRow>\r\n              <TableCell className={classes.tableCellName}>\r\n                Лицензии\r\n              </TableCell>\r\n              <TableCell className={classes.tableCellValue}>\r\n                \r\n                <TextField \r\n                  value={company.licenses}\r\n                  fullWidth\r\n                /> \r\n              </TableCell>\r\n            </TableRow>\r\n            \r\n          </TableBody>\r\n        </Table>\r\n\r\n        <div style={{textAlign: \"right\", marginTop: \"2em\"}}>\r\n          <Button type=\"button\" variant=\"contained\" className={classes.deleteButton}>\r\n              Удалить\r\n          </Button>\r\n          <Button type=\"button\" variant=\"contained\" color=\"primary\" style={{marginRight: 10}}>\r\n            Сохранить\r\n          </Button>\r\n        </div>\r\n      </div>\r\n    </Dialog>\r\n  );\r\n}\r\n","C:\\Projects\\dealer_front\\src\\components\\ModalUserInfo.tsx",["316"],"import React from 'react';\r\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Switch from '@material-ui/core/Switch';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport CloseIcon from '../assets/icons/Close circle.svg'\r\nimport { Typography } from '@material-ui/core';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n        \"&.MuiDialog-root\": {\r\n            backdropFilter: \"blur(5px)\",\r\n            background: \"rgba(104, 140, 188, 0.4) !important\"\r\n        },\r\n    },\r\n    containerRoot: {\r\n      padding: theme.spacing(2),\r\n    },\r\n    tableCellName: {\r\n      fontWeight: \"bolder\", \r\n      color: \"#96999c\", \r\n      marginRight: 5\r\n    },\r\n    tableCellValue: {\r\n        fontWeight: \"bolder\", \r\n        color: \"#666b73\"\r\n    },\r\n    headerStyle: {\r\n        background: theme.palette.secondary.main,\r\n        color: theme.palette.primary.main,\r\n        display: \"flex\",\r\n        justifyContent: \"space-between\",\r\n        alignItems: \"center\"\r\n    },\r\n    deleteButton: {\r\n        marginRight: 10, \r\n        background: theme.palette.error.main, \r\n        color: \"white\",\r\n        \"&:hover\": {\r\n            background: theme.palette.error.dark\r\n        }\r\n    }\r\n  }),\r\n);\r\n\r\nexport default function SimpleDialog({onClose, open, user}) {\r\n    const classes = useStyles();\r\n    const [checked, setChecked] = React.useState(user.projectVisibility === \"1\")\r\n\r\n    return (\r\n        <Dialog onClose={onClose} aria-labelledby=\"simple-dialog-title\" open={open} className={classes.root} fullWidth maxWidth=\"sm\">\r\n            <DialogTitle id=\"simple-dialog-title\" className={classes.headerStyle} disableTypography>\r\n                <Typography variant=\"h5\">\r\n                    Подробнее о пользователе\r\n                </Typography>\r\n                \r\n                <IconButton onClick={() => onClose()} style={{marginRight: \"-16px\"}}>\r\n                    <img src={CloseIcon} />\r\n                </IconButton>\r\n            </DialogTitle>\r\n            <div className={classes.containerRoot}>\r\n                <div style={{display: \"flex\", flexDirection: \"column\"}}>\r\n                    <Table size=\"small\">\r\n                    <TableBody>\r\n                        <TableRow>\r\n                            <TableCell className={classes.tableCellName}>\r\n                                Имя\r\n                            </TableCell>\r\n                            <TableCell className={classes.tableCellValue}>\r\n                                <TextField \r\n                                value={user.firstname}\r\n                                fullWidth\r\n                                />\r\n                            </TableCell>\r\n                        </TableRow>\r\n                        <TableRow>\r\n                            <TableCell className={classes.tableCellName}>\r\n                                Фамилия\r\n                            </TableCell>\r\n                            <TableCell className={classes.tableCellValue}>\r\n                                <TextField \r\n                                value={user.lastname}\r\n                                fullWidth\r\n                                />\r\n                            </TableCell>\r\n                        </TableRow>\r\n                        <TableRow>\r\n                            <TableCell className={classes.tableCellName}>\r\n                                Отчество\r\n                            </TableCell>\r\n                            <TableCell className={classes.tableCellValue}>\r\n                                <TextField \r\n                                value={user.patronym}\r\n                                fullWidth\r\n                                />\r\n                            </TableCell>\r\n                        </TableRow>\r\n\r\n                        <TableRow>\r\n                        <TableCell className={classes.tableCellName}>\r\n                            Дата регистрации\r\n                        </TableCell>\r\n                        <TableCell className={classes.tableCellValue}>\r\n                            <TextField \r\n                            value={user.registered}\r\n                            fullWidth\r\n                            />\r\n                        </TableCell>\r\n                        </TableRow>\r\n\r\n                        <TableRow>\r\n                        <TableCell className={classes.tableCellName}>\r\n                            Телефон\r\n                        </TableCell>\r\n                        <TableCell className={classes.tableCellValue}>\r\n                            <TextField \r\n                            value={user.phone}\r\n                            fullWidth\r\n                            />\r\n                        </TableCell>\r\n                        </TableRow>\r\n\r\n                        <TableRow>\r\n                        <TableCell className={classes.tableCellName}>\r\n                            Почта\r\n                        </TableCell>\r\n                        <TableCell className={classes.tableCellValue}>\r\n                            <TextField \r\n                                value={user.mail}\r\n                                fullWidth\r\n                            />\r\n                        </TableCell>\r\n                        </TableRow>\r\n\r\n                        \r\n                        <TableRow>\r\n                        <TableCell className={classes.tableCellName}>\r\n                            Роль\r\n                        </TableCell>\r\n                        <TableCell className={classes.tableCellValue}>\r\n                            <TextField \r\n                                value={user.role}\r\n                                fullWidth\r\n                            />\r\n                        </TableCell>\r\n                        </TableRow>\r\n                        <TableRow>\r\n                        <TableCell className={classes.tableCellName}>\r\n                            Максимальная скидка\r\n                        </TableCell>\r\n                        <TableCell className={classes.tableCellValue}>\r\n                            <TextField \r\n                                value=\"30\"\r\n                                fullWidth\r\n                            />\r\n                        </TableCell>\r\n                        </TableRow>\r\n\r\n                    </TableBody>\r\n                    </Table>\r\n                    <div style={{marginLeft: 20, display: \"flex\", flexDirection: \"row\", justifyContent: \"flex-end\", marginTop: \"1em\"}}>\r\n                        <FormControlLabel\r\n                            control={<Switch color=\"primary\" checked={checked} onChange={() => setChecked(!checked)} name=\"checkedA\" />}\r\n                            label=\"Может видеть проекты других сотрудников\"\r\n                        />\r\n                    </div>\r\n                </div>\r\n\r\n                <div style={{textAlign: \"right\", marginTop: \"2em\"}}>\r\n                    <Button type=\"button\" variant=\"contained\" className={classes.deleteButton}>\r\n                        Удалить\r\n                    </Button>\r\n                    <Button type=\"button\" variant=\"contained\" color=\"primary\" style={{marginRight: 10}}>\r\n                        Сохранить\r\n                    </Button>\r\n                </div>\r\n            </div>\r\n        </Dialog>\r\n    );\r\n}\r\n","C:\\Projects\\dealer_front\\src\\components\\ProjectOneByCard.tsx",["317","318","319","320","321","322","323"],"C:\\Projects\\dealer_front\\src\\components\\ToolInfoInProject.tsx",[],"C:\\Projects\\dealer_front\\src\\components\\MenuItems.tsx",["324","325","326","327","328","329","330"],"import React, { useState } from 'react';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport NotificationsMenu from '../components/NotificationsMenu'\r\nimport MailsMenu from '../components/MailsMenu'\r\nimport Divider from '@material-ui/core/Divider';\r\nimport UserIcon from \"../assets/icons/User.svg\"\r\nimport UsersGroupIcon from \"../assets/icons/Users.svg\"\r\nimport HomeIcon from \"../assets/icons/Home.svg\"\r\nimport StatisticIcon from \"../assets/icons/Chart bar.svg\"\r\nimport NewProjectIcon from \"../assets/icons/File plus.svg\"\r\nimport ProjectsListIcon from \"../assets/icons/Vector.svg\"\r\nimport { Link } from \"react-router-dom\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport { ListItemIcon, Typography } from \"@material-ui/core\";\r\nimport { makeStyles, createStyles, withStyles } from \"@material-ui/core/styles\";\r\nimport { connect } from \"react-redux\"\r\n\r\nconst useStyles = makeStyles(() =>\r\n  createStyles({\r\n    linkItem: {\r\n        textDecoration: \"none\",\r\n        fontWeight: 800,\r\n        paddingTop: \"0.2em\",\r\n        paddingBottom: \"0.2em\",\r\n        fontSize: 16,\r\n        color: \"gray\",\r\n    },\r\n    menuItem: {\r\n      \"&.Mui-selected\": {\r\n          fontWeight: \"bolder\",\r\n          backgroundColor: \"#e1edff\",\r\n          borderLeft: \"4px solid rgb(104, 140, 188)\", \r\n          boxSizing: \"border-box\"\r\n      }\r\n    },\r\n    categoryTitle: {\r\n        fontWeight: \"bolder\",\r\n        color: \"gray\",\r\n        display: 'inline-block',\r\n        marginRight: '10px'\r\n    }\r\n  })\r\n);\r\n\r\nfunction MainListItems({app}) {\r\n    const styles = useStyles();\r\n    return (\r\n    <div key=\"mainmenu\">\r\n        {app.sidebarOpened && <InlineDivider text=\"Общее\"/>}\r\n        <Link key='1' to=\"/\" className={styles.linkItem}>\r\n            <StyledMenuItem \r\n            key={0}\r\n            selected={window.location.pathname === \"/\"}\r\n            className={styles.menuItem}\r\n            >\r\n                <ListItemIcon ><img src={StatisticIcon} /></ListItemIcon>\r\n                <ListItemText primary=\"Статистика\" />\r\n            </StyledMenuItem>\r\n        </Link>\r\n\r\n        {app.sidebarOpened && <InlineDivider text=\"Проекты\"/>}\r\n        <Link key='2' to=\"/projects\" className={styles.linkItem}>\r\n            <StyledMenuItem \r\n            key={2} \r\n            className={styles.menuItem}\r\n            selected={window.location.pathname === \"/projects\"}\r\n            >\r\n            <ListItemIcon ><img src={ProjectsListIcon} /></ListItemIcon>\r\n            <ListItemText primary=\"Проекты\"/>\r\n            </StyledMenuItem>\r\n        </Link>\r\n        \r\n        <Link key='3' to=\"/newproject\" className={styles.linkItem}>\r\n            <StyledMenuItem key={3} className={styles.menuItem} selected={window.location.pathname === \"/newproject\"}>\r\n            <ListItemIcon ><img src={NewProjectIcon} /></ListItemIcon>\r\n            <ListItemText primary=\"Новый проект\"/>\r\n            </StyledMenuItem>\r\n        </Link>\r\n\r\n        {app.sidebarOpened && <InlineDivider text=\"Организация\"/>}\r\n        <Link to=\"/user\" className={styles.linkItem } key=\"4\">\r\n            <StyledMenuItem className={styles.menuItem} selected={window.location.pathname === \"/user\"}>\r\n                <ListItemIcon><img src={UserIcon} /></ListItemIcon>\r\n                <ListItemText primary=\"Мой кабинет\"/>\r\n            </StyledMenuItem>\r\n        </Link>\r\n        <Link key=\"5\" to=\"/coworkers\" className={styles.linkItem}>\r\n            <StyledMenuItem key={4} className={styles.menuItem} selected={window.location.pathname === \"/coworkers\"}>\r\n            <ListItemIcon ><img src={UsersGroupIcon} /></ListItemIcon>\r\n            <ListItemText primary=\"Сотрудники\"/>\r\n            </StyledMenuItem>\r\n        </Link>\r\n        <Link to=\"/company\" className={styles.linkItem } key=\"6\">\r\n            <StyledMenuItem className={styles.menuItem} selected={window.location.pathname === \"/company\"}>\r\n                <ListItemIcon><img src={HomeIcon} /></ListItemIcon>\r\n                <ListItemText primary=\"Организация\"/>\r\n            </StyledMenuItem>\r\n        </Link>\r\n\r\n        {app.sidebarOpened && <InlineDivider text=\"Оповещение\"/>}\r\n        <StyledMenuItem className={styles.menuItem } key=\"7\">\r\n            <NotificationsMenu />\r\n        </StyledMenuItem>\r\n        <StyledMenuItem className={styles.menuItem } key=\"8\">\r\n            <MailsMenu />\r\n        </StyledMenuItem>    \r\n    </div>\r\n    )\r\n}\r\n\r\nfunction InlineDivider({text}) {\r\n    const useStyles = makeStyles(() =>\r\n    createStyles({\r\n        categoryTitle: {\r\n            fontWeight: \"bolder\",\r\n            color: \"gray\",\r\n            display: 'inline-block',\r\n            marginRight: '10px',\r\n        },\r\n        wrapper: {\r\n            display: \"flex\", \r\n            alignItems: 'center',\r\n            marginTop: \"2em\",\r\n            marginLeft: \"1em\"\r\n        }\r\n    })\r\n    );\r\n\r\n    const classes = useStyles();\r\n    return (\r\n        <div className={classes.wrapper}>\r\n            <Typography className={classes.categoryTitle}>{text}</Typography>\r\n            <Divider style={{\r\n                flex: \"1 0 auto\"\r\n            }}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst StyledMenuItem = withStyles((theme) => ({\r\n    root: {\r\n      '&:hover': {\r\n        backgroundColor: \"#e1edff\",\r\n        color: \"#688cbc\",\r\n      },\r\n    },\r\n}))(MenuItem);\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n      app: state.app\r\n    }\r\n}\r\n  \r\nexport default connect(mapStateToProps, null)(MainListItems)\r\n","C:\\Projects\\dealer_front\\src\\types\\index.ts",[],"C:\\Projects\\dealer_front\\src\\components\\AccordionOfTools.tsx",["331","332","333","334","335","336"],"import React from 'react'\r\nimport { Theme, createStyles, makeStyles } from '@material-ui/core/styles';\r\nimport Accordion from '@material-ui/core/Accordion';\r\nimport AccordionSummary from '@material-ui/core/AccordionSummary';\r\nimport AccordionDetails from '@material-ui/core/AccordionDetails';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport Button from '@material-ui/core/Button';\r\nimport Popover from '@material-ui/core/Popover';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardHeader from '@material-ui/core/CardHeader';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport InfoIcon from \"../assets/icons/Info circle.svg\"\r\nimport clsx from 'clsx';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      width: '100%',\r\n    },\r\n    heading: {\r\n      fontSize: theme.typography.pxToRem(15),\r\n      fontWeight: theme.typography.fontWeightRegular\r\n    },\r\n    table: {\r\n        minWidth: 650,\r\n        width: \"100%\"\r\n    },\r\n    accordionSummaryStyle: {\r\n        display: 'flex',\r\n        justifyContent: \"space-between !important\",\r\n        alignItems: \"center\",\r\n        width: \"100%\",\r\n        height: \"100%\",\r\n    },\r\n    accordionContainer: {\r\n        marginBottom: \"1em\",\r\n    },\r\n    fullDirection: {\r\n        background: \"#e6f7e3\",\r\n        color: \"green\"\r\n    },\r\n    outDirection: {\r\n        background: \"#ffffff\",\r\n        color: \"#666b73\"\r\n    },\r\n    partDirection: {\r\n        background: \"#f7f5e3\",\r\n        color: \"#ffb62f\"\r\n    },\r\n    buttonFullDirection: {\r\n        border: \"1px solid green\",\r\n        minWidth: 150,\r\n        color: \"green\",\r\n        \"&:hover\": {\r\n            color: \"green\",\r\n            border: \"1px solid green\"\r\n        }\r\n    },\r\n    buttonPartDirection: {\r\n        border: \"1px solid #ffb62f\",\r\n        minWidth: 150,\r\n        color: \"#ffb62f\",\r\n        \"&:hover\": {\r\n            color: \"#ffb62f\",\r\n            border: \"1px solid #ffb62f\"\r\n        }\r\n    },\r\n    buttonOutDirection: {\r\n        minWidth: 150\r\n    },\r\n    popoverPaper: {\r\n      padding: theme.spacing(1)\r\n    },\r\n    media: {\r\n        height: 0,\r\n        paddingTop: '56.25%', // 16:9\r\n    },\r\n    selectedMedia: {\r\n        height: 300,\r\n        paddingTop: '56.25%', // 16:9\r\n    },\r\n    expand: {\r\n        transform: 'rotate(0deg)',\r\n        marginLeft: 'auto',\r\n        transition: theme.transitions.create('transform', {\r\n            duration: theme.transitions.duration.shortest,\r\n        }),\r\n    },\r\n    expandOpen: {\r\n        transform: 'rotate(180deg)',\r\n    },\r\n        addingStyle: {\r\n        minWidth: 275,\r\n        background: \"#F2CEAA\",\r\n        margin: 5,\r\n        height: \"100%\"\r\n    },\r\n    toolStyle: {\r\n        // minWidth: 275,\r\n        margin: 5,\r\n        height: \"100%\"\r\n    },\r\n  }),\r\n);\r\n\r\n\r\nfunction AccordionOfTools({\r\n        categoryName,\r\n        category,\r\n        filteredToolsByCategory,\r\n        allTools,\r\n        setTools,\r\n        handleInfoClick\r\n    }) {\r\n    const classes = useStyles();\r\n    const [toolsInAccordion, setToolsInAccordion] = React.useState([])\r\n    const [choosingType, setChoosingType] = React.useState('nope')\r\n    const [checkedCount, setCheckedCount] = React.useState(0)\r\n    const [expanded, setExpanded] = React.useState(false);\r\n\r\n    const oneToolChecked = (tool) => {\r\n        let currentAllTools = allTools.splice(0)\r\n\r\n        currentAllTools.forEach( elem => {\r\n            if (elem.id === tool.id) {\r\n                elem.isChecked = !tool.isChecked\r\n            }\r\n        })\r\n        setTools(prev => currentAllTools)\r\n\r\n        let checkedTools = []\r\n        let uncheckedTools = []\r\n        toolsInAccordion.forEach( item => item.isChecked === true ? checkedTools.push(item) : uncheckedTools.push(item))\r\n\r\n        console.log(checkedTools)\r\n\r\n        let checkedLength = checkedTools.length\r\n\r\n        if (checkedLength === toolsInAccordion.length) {\r\n            setChoosingType('all')\r\n        } else {\r\n            if (checkedLength > 0) {\r\n                setChoosingType('part')\r\n            } else {\r\n                setChoosingType('nope')\r\n            }\r\n        }\r\n        setCheckedCount(checkedLength)\r\n    }\r\n\r\n    function buttonStyleSelector(variable) {\r\n        switch (variable) {\r\n            case 'all': return classes.buttonFullDirection\r\n            case 'part': return classes.buttonPartDirection\r\n            default: return classes.buttonOutDirection\r\n        }\r\n    }\r\n\r\n    function styleSelector(variable) {\r\n        switch (variable) {\r\n            case 'all': return classes.fullDirection\r\n            case 'part': return classes.partDirection\r\n            default: return classes.outDirection\r\n        }\r\n    }\r\n\r\n    function spanCounterSelector(variable) {\r\n        switch (variable) {\r\n            case 'all': return <span style={{marginRight: 20, fontWeight: \"bold\"}}>Выбрано позиций: {toolsInAccordion.length} из {toolsInAccordion.length}</span>\r\n            case 'part': return <span style={{marginRight: 20, fontWeight: \"bold\"}}>Выбрано позиций: {checkedCount} из {toolsInAccordion.length}</span>\r\n            default: return null\r\n        }\r\n    }\r\n\r\n    const handleExpandClick = () => {\r\n        if (!expanded) {\r\n            setToolsInAccordion(filteredToolsByCategory(allTools, category.id))\r\n        }\r\n        setExpanded(!expanded);\r\n    };\r\n\r\n    return (\r\n        <div className={classes.accordionContainer}>\r\n            <Accordion className={styleSelector(choosingType)}>\r\n                <AccordionSummary\r\n                aria-controls=\"panel1a-content\"\r\n                id=\"panel1a-header\"\r\n                onClick={handleExpandClick} \r\n                >\r\n                    <div className={classes.accordionSummaryStyle}>\r\n                        <Typography className={classes.heading}>{categoryName}</Typography>\r\n                        <div style={{display: \"flex\", alignItems: \"center\"}}>\r\n                            {filteredToolsByCategory ? spanCounterSelector(choosingType) : null}\r\n                            <Button \r\n                            variant=\"outlined\" \r\n                            color=\"primary\"\r\n                            className={buttonStyleSelector(choosingType)}\r\n                            onClick={handleExpandClick} \r\n                            >\r\n                                <span>{expanded ? \"Скрыть\" : \"Показать\"}</span>\r\n                                <ExpandMoreIcon\r\n                                    className={clsx(classes.expand, {\r\n                                        [classes.expandOpen]: expanded,\r\n                                    })}\r\n                                />\r\n                            </Button>\r\n                        </div>\r\n                    </div>\r\n\r\n                </AccordionSummary>\r\n                <AccordionDetails >\r\n                    <Typography className={classes.root}>\r\n                        <Table className={classes.table} aria-label=\"simple table\" size=\"small\">\r\n                            <TableHead>\r\n                                <TableRow>\r\n                                    <TableCell style={{color: \"#666b73\", fontWeight: \"bolder\"}}>Название</TableCell>\r\n                                    <TableCell align=\"center\">\r\n\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            </TableHead>\r\n                            <TableBody>\r\n                                {toolsInAccordion ? toolsInAccordion.map( oneTool => (\r\n                                    <TableRow key={oneTool.id}>\r\n                                        <TableCell component=\"th\" scope=\"row\">\r\n                                            {oneTool.tool_name}\r\n                                            <IconButton onClick={handleInfoClick}><img src={InfoIcon} /></IconButton>\r\n                                        </TableCell>\r\n\r\n                                        <TableCell align=\"center\" scope=\"row\" component=\"th\">\r\n                                            <Checkbox \r\n                                                checked={oneTool.isChecked} \r\n                                                onChange={() => oneToolChecked(oneTool)} \r\n                                                color=\"primary\"\r\n                                            />\r\n                                        </TableCell>\r\n                                    </TableRow>\r\n                                )) : null}\r\n                            </TableBody>\r\n                        </Table>\r\n                    </Typography>\r\n                </AccordionDetails>\r\n            </Accordion>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AccordionOfTools","C:\\Projects\\dealer_front\\src\\components\\ModalCommercialOffer.tsx",["337","338","339","340"],"import React from 'react';\r\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport CloseIcon from '../assets/icons/Close circle.svg'\r\nimport Typography from '@material-ui/core/Typography';\r\nimport DownloadIcon from \"../assets/icons/Download.svg\"\r\nimport { Link } from 'react-router-dom'\r\nimport PDFIcon from '../assets/icons/pdfred.png'\r\nimport Popover from '@material-ui/core/Popover';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport EyeIcon from \"../assets/icons/Eye.svg\"\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n        \"&.MuiDialog-root\": {\r\n            backdropFilter: \"blur(5px)\",\r\n            background: \"rgba(104, 140, 188, 0.4) !important\"\r\n        },\r\n    },\r\n    containerRoot: {\r\n      padding: theme.spacing(2),\r\n    },\r\n    tableCellName: {\r\n      fontWeight: \"bolder\", \r\n      color: \"#96999c\", \r\n      marginRight: 5\r\n    },\r\n    tableCellValue: {\r\n      fontWeight: \"bolder\", \r\n      color: \"#666b73\"\r\n    },\r\n    headerStyle: {\r\n      background: theme.palette.secondary.main,\r\n      color: theme.palette.primary.main,\r\n      display: \"flex\",\r\n      justifyContent: \"space-between\",\r\n      alignItems: \"center\"\r\n    },\r\n    deleteButton: {\r\n      marginRight: 10, \r\n      background: theme.palette.error.main, \r\n      color: \"white\",\r\n      \"&:hover\": {\r\n          background: theme.palette.error.dark\r\n      }\r\n    },\r\n    popoverPaper: {\r\n      padding: theme.spacing(1)\r\n    }\r\n  }),\r\n);\r\n\r\nconst fakeCommercialOffers = [\r\n  {\r\n    id: 0,\r\n    name: '8237465',\r\n    created: '18.05.2020',\r\n    actual: '20.10.2020',\r\n  },\r\n  {\r\n    id: 1,\r\n    name: '8237465',\r\n    created: '18.05.2020',\r\n    actual: '20.10.2020',\r\n  },\r\n  {\r\n    id: 2,\r\n    name: '8237465',\r\n    created: '18.05.2020',\r\n    actual: '20.10.2020',\r\n  },\r\n  {\r\n    id: 3,\r\n    name: '8237465',\r\n    created: '18.05.2020',\r\n    actual: '20.10.2020',\r\n  },\r\n  {\r\n    id: 4,\r\n    name: '8237465',\r\n    created: '18.05.2020',\r\n    actual: '20.10.2020',\r\n  }\r\n]\r\n\r\nexport default function ModalCommercialOffer({onClose, open, user}) {\r\n    const classes = useStyles();\r\n    const [anchorEl, setAnchorEl] = React.useState<HTMLButtonElement | null>(null);\r\n    const handleClick = (event) => {\r\n      setAnchorEl(event.currentTarget);\r\n    }; \r\n    const handleClose = () => {\r\n      setAnchorEl(null);\r\n    };\r\n    const openPop = Boolean(anchorEl);\r\n    const id = openPop ? 'simple-popover' : undefined;\r\n\r\n    return (\r\n        <Dialog onClose={onClose} aria-labelledby=\"simple-dialog-title\" open={open} className={classes.root} fullWidth maxWidth=\"md\">\r\n            <DialogTitle id=\"simple-dialog-title\" className={classes.headerStyle} disableTypography>\r\n              <div>\r\n              <Typography variant=\"h5\">\r\n                    Коммерческие предложения\r\n                </Typography>\r\n                <Typography style={{color: \"grey\",marginTop: 5}}>\r\n                    для ЛПУ ООО \"ААА\" по проекту #287394827\r\n                </Typography>\r\n              </div>\r\n \r\n                \r\n                <IconButton onClick={() => onClose()} style={{marginRight: \"-16px\"}}>\r\n                    <img src={CloseIcon} />\r\n                </IconButton>\r\n            </DialogTitle>\r\n            <div className={classes.containerRoot}>\r\n                <Popover\r\n                  id={id}\r\n                  open={openPop}\r\n                  anchorEl={anchorEl}\r\n                  onClose={handleClose}\r\n                  anchorOrigin={{\r\n                    vertical: 'bottom',\r\n                    horizontal: 'left',\r\n                  }}\r\n                  transformOrigin={{\r\n                    vertical: 'top',\r\n                    horizontal: 'center',\r\n                  }}\r\n                  \r\n                >\r\n                  <Paper className={classes.popoverPaper}>\r\n                    <Typography style={{color: \"rgb(104, 140, 188)\", marginBottom: 10}}>\r\n                      Направления КП\r\n                    </Typography>\r\n                    <Typography>\r\n                      Мониторы пациента\r\n                    </Typography>\r\n                    <Typography>\r\n                      Видеосистемы\r\n                    </Typography>\r\n                    <Typography>\r\n                      Рентгены\r\n                    </Typography>\r\n                  </Paper>\r\n                </Popover>\r\n\r\n                <Table size=\"small\" style={{width: \"100%\"}}>\r\n                  <TableHead>\r\n                    <TableRow>\r\n                      <TableCell>Название</TableCell>\r\n                      <TableCell>Создано</TableCell>\r\n                      <TableCell>Актуально до</TableCell>\r\n                      <TableCell></TableCell>\r\n                      <TableCell></TableCell>\r\n                      <TableCell></TableCell>\r\n                    </TableRow>\r\n                  </TableHead>\r\n                  <TableBody>\r\n                    {fakeCommercialOffers.map( item => (\r\n                      <TableRow>\r\n                        <TableCell>{item.name}</TableCell>\r\n                        <TableCell>{item.created}</TableCell>\r\n                        <TableCell>{item.actual}</TableCell>\r\n                        \r\n                        <TableCell style={{width: 20, padding: 0}}>\r\n                          <IconButton>\r\n                            <img src={DownloadIcon}/>\r\n                          </IconButton>\r\n                        </TableCell>\r\n                        <TableCell style={{width: 20, padding: 0}}>\r\n                          <IconButton>\r\n                            <img src={PDFIcon} style={{width: 25, height: 25}}/>\r\n                          </IconButton>\r\n                        </TableCell>\r\n                        <TableCell style={{width: 20, padding: 0}}>\r\n                          <IconButton onClick={handleClick}>\r\n                            <img src={EyeIcon}/>\r\n                          </IconButton>\r\n                        </TableCell>\r\n                      </TableRow>\r\n                    ))}\r\n                  </TableBody>\r\n                </Table>\r\n\r\n                <div style={{textAlign: \"right\", marginTop: \"2em\"}}>\r\n                  <Link to=\"/newoffer\" style={{textDecoration: \"none\"}}>\r\n                    <Button type=\"button\" variant=\"contained\" color=\"primary\">\r\n                      Создать новое КП\r\n                    </Button>\r\n                  </Link>\r\n                </div>\r\n            </div>\r\n        </Dialog>\r\n    );\r\n}\r\n","C:\\Projects\\dealer_front\\src\\components\\Search.tsx",["341","342"],"import React from 'react'\r\nimport TextField from '@material-ui/core/TextField'\r\nimport Select from '@material-ui/core/Select'\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport { KeyboardDatePicker, MuiPickersUtilsProvider } from '@material-ui/pickers';\r\nimport DateFnsUtils from '@date-io/date-fns';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport clsx from 'clsx';\r\n\r\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    formControl: {\r\n      minWidth: 120,\r\n      marginRight: \"2em\"\r\n    },\r\n    formContainer: {\r\n        display: \"flex\",\r\n        flexDirection: \"row\",\r\n        alignItems: \"space-between\",\r\n    },\r\n    mainWrapper: {\r\n        width: \"100%\"\r\n    },\r\n    toolsWrapper: {\r\n        display: 'flex',\r\n        justifyContent: \"space-between\",\r\n        width: \"100%\",\r\n        marginTop: \"1em\"\r\n    },\r\n    checkboxContainer: {\r\n        display: \"flex\",\r\n        alignItems: \"center\",\r\n        marginRight: 10\r\n    },\r\n    checkboxGroup: {\r\n       display: \"flex\",\r\n       fontWeight: 500\r\n    },\r\n    icon: {\r\n        borderRadius: \"50%\",\r\n        width: 15,\r\n        height: 15,\r\n        boxShadow: 'inset 0 0 0 1px rgba(16,22,26,.2), inset 0 -1px 0 rgba(16,22,26,.1)',\r\n        backgroundColor: '#f5f8fa',\r\n        backgroundImage: 'linear-gradient(180deg,hsla(0,0%,100%,.8),hsla(0,0%,100%,0))',\r\n        '$root.Mui-focusVisible &': {\r\n          outline: '2px auto rgba(19,124,189,.6)',\r\n          outlineOffset: 2,\r\n        },\r\n        'input:hover ~ &': {\r\n          backgroundColor: '#ebf1f5',\r\n        },\r\n        'input:disabled ~ &': {\r\n          boxShadow: 'none',\r\n          background: 'rgba(206,217,224,.5)',\r\n        },\r\n      },\r\n      checkedIcon: {\r\n        backgroundColor: 'rgb(104, 140, 188)',\r\n        backgroundImage: 'linear-gradient(180deg,hsla(0,0%,100%,.1),hsla(0,0%,100%,0))',\r\n        '&:before': {\r\n          display: 'block',\r\n          width: 15,\r\n          height: 15,\r\n          backgroundImage:\r\n            \"url(\\\"data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16'%3E%3Cpath\" +\r\n            \" fill-rule='evenodd' clip-rule='evenodd' d='M12 5c-.28 0-.53.11-.71.29L7 9.59l-2.29-2.3a1.003 \" +\r\n            \"1.003 0 00-1.42 1.42l3 3c.18.18.43.29.71.29s.53-.11.71-.29l5-5A1.003 1.003 0 0012 5z' fill='%23fff'/%3E%3C/svg%3E\\\")\",\r\n          content: '\"\"',\r\n        },\r\n        'input:hover ~ &': {\r\n          backgroundColor: '#106ba3',\r\n        },\r\n      },\r\n      datepickerWrapper: {\r\n          display: \"flex\",\r\n          alignItems: \"center\"\r\n      }\r\n  }),\r\n);\r\n\r\n\r\nfunction Search() {\r\n    const classes = useStyles();\r\n    const [searchType, setSearchType] = React.useState(0)\r\n    const [authorised, setAuthorised] = React.useState(false)\r\n    const possibleProjectStatus = [\r\n        {\r\n            id: 1,\r\n            name: \"Авторизовано\"\r\n        },\r\n        {\r\n            id: 2,\r\n            name: \"Авторизовано частично\"\r\n        },\r\n        {\r\n            id: 3,\r\n            name: \"Не авторизовано\"\r\n        },\r\n        {\r\n            id: 4,\r\n            name: \"На авторизации\"\r\n        },\r\n        {\r\n            id: 5,\r\n            name: \"Запрос актуальности\"\r\n        },\r\n        {\r\n            id: 6,\r\n            name: \"Завершено\"\r\n        },\r\n    ]\r\n\r\n    return (\r\n        <div className={classes.mainWrapper}>\r\n            <Typography style={{fontWeight: \"bolder\", color: \"rgb(104, 140, 188)\", marginRight: 5}}>Статусы проектов:</Typography>\r\n            <div className={classes.toolsWrapper}>\r\n                <div className={classes.checkboxGroup}>\r\n                    {possibleProjectStatus.map(status => (\r\n                        <FormControlLabel\r\n                        control={\r\n                            <Checkbox \r\n                                size=\"small\" \r\n                                name=\"checkedA\"\r\n                                color=\"primary\"\r\n                                checkedIcon={<span className={clsx(classes.icon, classes.checkedIcon)} />}\r\n                                icon={<span className={classes.icon}/>}\r\n                            />\r\n                        }\r\n                        label={<span>{status.name}</span>}\r\n                        />\r\n                    ))}\r\n                </div>\r\n\r\n                <div className={classes.formContainer}>\r\n                    <FormControl className={classes.formControl}>\r\n                        <Select\r\n                        labelId=\"demo-simple-select-label\"\r\n                        id=\"demo-simple-select\"\r\n                        onChange={(e) => setSearchType(+e.target.value)}\r\n                        value={searchType}\r\n                        >\r\n                            <MenuItem value={0}>Все проекты</MenuItem>\r\n                            <MenuItem value={1}>По ИНН</MenuItem>\r\n                            <MenuItem value={2}>По КЛАДР</MenuItem>\r\n                            <MenuItem value={3}>По оборудованию</MenuItem>\r\n                            <MenuItem value={4}>По типу оборудования</MenuItem>\r\n                            <MenuItem value={5}>По датам</MenuItem>\r\n                            <MenuItem value={6}>По названию ЛУ</MenuItem>\r\n                            <MenuItem value={7}>По сотруднику</MenuItem>\r\n                        </Select>\r\n                    </FormControl>                    \r\n                    {GetSearchFieldByType(searchType)}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction DatePickerForSearchByDate() {\r\n    const [startRangeDate, setStartRangeDate] = React.useState(new Date('2014-08-18T21:11:54'));\r\n    const [endRangeDate, setEndRangeDate] = React.useState(new Date('2014-08-18T21:11:54'));\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n            <div className={classes.datepickerWrapper}>\r\n                <span>с</span>\r\n                <KeyboardDatePicker\r\n                    disableToolbar\r\n                    variant=\"inline\"\r\n                    format=\"dd.mm.yyyy\"\r\n                    margin=\"normal\"\r\n                    id=\"date-picker-inline\"\r\n                    value={startRangeDate}\r\n                    onChange={date => setStartRangeDate(date)}\r\n                    KeyboardButtonProps={{\r\n                    'aria-label': 'change date',\r\n                    }}\r\n                    style={{margin: 0, maxWidth: 120, marginLeft: 10, marginRight: 10}}\r\n                />\r\n                <span>по</span>\r\n                <KeyboardDatePicker\r\n                    disableToolbar\r\n                    variant=\"inline\"\r\n                    format=\"dd.mm.yyyy\"\r\n                    margin=\"normal\"\r\n                    id=\"date-picker-inline\"\r\n                    value={endRangeDate}\r\n                    onChange={date => setEndRangeDate(date)}\r\n                    KeyboardButtonProps={{\r\n                    'aria-label': 'change date',\r\n                    }}\r\n                    style={{margin: 0, marginLeft: 10, maxWidth: 120}}\r\n                />\r\n            </div>\r\n      </MuiPickersUtilsProvider>\r\n    )\r\n}\r\n\r\nfunction DefaultTextField() {\r\n    return (\r\n        <TextField\r\n        fullWidth\r\n        placeholder=\"Поиск\"\r\n    />\r\n    )\r\n}\r\n\r\nfunction GetSearchFieldByType(searchType: number) {\r\n    const classes = useStyles();\r\n    switch(searchType) {\r\n        case 4: return <div style={{display: \"inline-block\", flex: \"1 0 auto\"}}><SelectorForSearchByToolsType /></div>\r\n        case 5: return <div style={{display: \"inline-block\", flex: \"1 0 auto\"}}><DatePickerForSearchByDate /></div>\r\n        default: return (\r\n            <FormControl className={classes.formControl}><DefaultTextField /></FormControl>\r\n        )\r\n    }\r\n}\r\n\r\nfunction SelectorForSearchByToolsType() {\r\n    return (\r\n        <Select\r\n            value={0}\r\n            id=\"select\"\r\n        >   \r\n            <MenuItem value={0}>Всё оборудование</MenuItem>\r\n            <MenuItem value={1}>Мониторы пациента</MenuItem>\r\n            <MenuItem value={2}>Рентген-аппараты</MenuItem>\r\n        </Select>\r\n    )\r\n}\r\n\r\nexport default Search","C:\\Projects\\dealer_front\\src\\components\\ReqContainer.tsx",[],"C:\\Projects\\dealer_front\\src\\middleware\\dealer_projects.js",["343"],"C:\\Projects\\dealer_front\\src\\middleware\\dealer_projects_tools.js",[],["344","345"],"C:\\Projects\\dealer_front\\src\\middleware\\infods5i_dealers.js",["346","347","348","349","350","351","352"],"C:\\Projects\\dealer_front\\src\\config\\server.ts",[],"C:\\Projects\\dealer_front\\src\\components\\MailsMenu.tsx",["353","354","355","356","357","358","359","360","361","362"],"import React from 'react'\r\nimport { Typography, Menu, Avatar, IconButton } from \"@material-ui/core\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport { blue, common } from \"@material-ui/core/colors\";\r\n// import MailIcon from '@material-ui/icons/MailOutline';\r\nimport Badge from '@material-ui/core/Badge';\r\nimport { ListItemIcon, ListItemText} from \"@material-ui/core\";\r\nimport MailIcon from \"../assets/icons/Email.svg\"\r\n\r\nconst blue600 = blue[\"900\"];\r\nconst drawerWidth = 400;\r\n\r\nconst withMenu = ({\r\n    anchorEl,\r\n    open,\r\n    signoutClick,\r\n    changePassClick,\r\n    handleClose,\r\n  }) => (\r\n    <Menu\r\n      id=\"menu-appbar\"\r\n      anchorEl={anchorEl}\r\n      anchorOrigin={{\r\n        vertical: \"top\",\r\n        horizontal: \"right\",\r\n      }}\r\n      keepMounted\r\n      transformOrigin={{\r\n        vertical: \"top\",\r\n        horizontal: \"right\",\r\n      }}\r\n      open={open}\r\n      onClose={handleClose}\r\n    >\r\n      <MenuItem onClick={signoutClick}>\r\n        Почта\r\n      </MenuItem>\r\n      <MenuItem onClick={signoutClick}>\r\n        Почта\r\n      </MenuItem>\r\n      <MenuItem onClick={signoutClick}>\r\n        Почта\r\n      </MenuItem>\r\n      <MenuItem onClick={signoutClick}>\r\n        Почта\r\n      </MenuItem>\r\n    </Menu>\r\n  );\r\n\r\ninterface MailsMenuProps {\r\n    username?: string;\r\n    onSignoutClick?: () => void;\r\n    onChangePassClick?: () => void;\r\n}\r\n\r\nfunction MailsMenu<MailsMenuProps>({\r\n    username = 'Даэсмедов Михаил',\r\n    onSignoutClick = () => console.log('signout'),\r\n    onChangePassClick = () => console.log('signin'),\r\n}) {\r\n    const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null);\r\n    const open = Boolean(anchorEl);\r\n  \r\n    const handleClose = () => {\r\n      setAnchorEl(null);\r\n    };\r\n    \r\n    const signoutClick = (event: React.ChangeEvent<unknown>) => {\r\n      event.preventDefault();\r\n      onSignoutClick();\r\n    };\r\n  \r\n    const changePassClick = (event: React.ChangeEvent<unknown>) => {\r\n      event.preventDefault();\r\n      onChangePassClick();\r\n      handleClose()\r\n    };\r\n  \r\n    const handleMenu = (event: React.MouseEvent<HTMLElement>) => {\r\n      setAnchorEl(event.currentTarget);\r\n      console.log('click')\r\n    };\r\n    return (\r\n        <div>\r\n            <div onClick={handleMenu} style={{display: \"flex\", alignItems: \"center\"}}>\r\n              <ListItemIcon><img src={MailIcon} /></ListItemIcon>\r\n              <ListItemText primary=\"Сообщения\"/>\r\n            </div>\r\n            {withMenu({\r\n                anchorEl,\r\n                open,\r\n                signoutClick,\r\n                changePassClick,\r\n                handleClose,\r\n            })}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MailsMenu","C:\\Projects\\dealer_front\\src\\components\\NotificationsMenu.tsx",["363","364","365","366","367","368","369"],"import React from 'react'\r\nimport { Menu, IconButton } from \"@material-ui/core\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport { blue, common } from \"@material-ui/core/colors\";\r\nimport NotificationsIcon from '@material-ui/icons/Notifications';\r\nimport Badge from '@material-ui/core/Badge';\r\nimport { ListItemIcon, ListItemText} from \"@material-ui/core\";\r\nimport BellIcon from \"../assets/icons/Bell.svg\"\r\n\r\nconst blue600 = blue[\"900\"];\r\nconst drawerWidth = 400;\r\n\r\nconst styles = {\r\ndrawerPaper: {\r\n    width: drawerWidth,\r\n    backgroundColor: \"rgba(227, 231, 232, 0.63)\",\r\n    overflow: \"auto\",\r\n},\r\navatarDiv: {\r\n    padding: \"15px 0 10px 10px\" as TODO,\r\n    width: 250\r\n},\r\navatarIcon: {\r\n    float: \"left\" as TODO,\r\n    display: \"block\" as TODO,\r\n    marginRight: 15,\r\n    boxShadow: \"0px 0px 0px 8px rgba(0,0,0,0.2)\" as TODO,\r\n},\r\navatarSpan: {\r\n    paddingTop: 0,\r\n    display: \"block\",\r\n    color: \"purple\",\r\n    fontWeight: 400,\r\n    fontSize: 12,\r\n    textShadow: \"1px 1px #444\",\r\n},\r\nuser: {\r\n    fontSize: 14,\r\n    color: common.white,\r\n},\r\nmenuItem: {\r\n    color: blue600,\r\n    fontWeight: 500,\r\n    paddingTop: \"0.2em\",\r\n    paddingBottom: \"0.2em\",\r\n    fontSize: 16,\r\n},\r\n};\r\n\r\nconst withMenu = ({\r\n    anchorEl,\r\n    open,\r\n    signoutClick,\r\n    changePassClick,\r\n    handleClose,\r\n  }) => (\r\n    <Menu\r\n      id=\"menu-appbar\"\r\n      anchorEl={anchorEl}\r\n      anchorOrigin={{\r\n        vertical: \"top\",\r\n        horizontal: \"right\",\r\n      }}\r\n      keepMounted\r\n      transformOrigin={{\r\n        vertical: \"top\",\r\n        horizontal: \"right\",\r\n      }}\r\n      open={open}\r\n      onClose={handleClose}\r\n    >\r\n      <MenuItem onClick={signoutClick}>\r\n        Уведомление\r\n      </MenuItem>\r\n      <MenuItem onClick={signoutClick}>\r\n        Уведомление\r\n      </MenuItem>\r\n      <MenuItem onClick={signoutClick}>\r\n        Уведомление\r\n      </MenuItem>\r\n      <MenuItem onClick={signoutClick}>\r\n        Уведомление\r\n      </MenuItem>\r\n    </Menu>\r\n  );\r\n\r\ninterface NotificationsMenuProps {\r\nusername?: string;\r\nonSignoutClick?: () => void;\r\nonChangePassClick?: () => void;\r\n}\r\n\r\nfunction NotificationsMenu<NotificationsMenuProps>({\r\n    username = 'Даэсмедов Михаил',\r\n    onSignoutClick = () => console.log('signout'),\r\n    onChangePassClick = () => console.log('signin'),\r\n}) {\r\n    const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null);\r\n    const open = Boolean(anchorEl);\r\n  \r\n    const handleClose = () => {\r\n      setAnchorEl(null);\r\n    };\r\n    \r\n    const signoutClick = (event: React.ChangeEvent<unknown>) => {\r\n      event.preventDefault();\r\n      onSignoutClick();\r\n    };\r\n  \r\n    const changePassClick = (event: React.ChangeEvent<unknown>) => {\r\n      event.preventDefault();\r\n      onChangePassClick();\r\n      handleClose()\r\n    };\r\n  \r\n    const handleMenu = (event: React.MouseEvent<HTMLElement>) => {\r\n      setAnchorEl(event.currentTarget);\r\n      console.log('click')\r\n    };\r\n    return (\r\n        <div>\r\n            <div color=\"inherit\" onClick={handleMenu} style={{display: \"flex\", alignItems: \"center\"}}>\r\n              <ListItemIcon><img src={BellIcon} /></ListItemIcon>\r\n              <ListItemText primary=\"Уведомления\"/>\r\n            </div>\r\n            {withMenu({\r\n                anchorEl,\r\n                open,\r\n                signoutClick,\r\n                changePassClick,\r\n                handleClose,\r\n            })}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default NotificationsMenu","C:\\Projects\\dealer_front\\src\\components\\AdditionalDealerReq.tsx",[],"C:\\Projects\\dealer_front\\src\\components\\NewProjectReq.tsx",[],"C:\\Projects\\dealer_front\\src\\components\\ModalProjectPresend.tsx",["370"],"import React from 'react';\r\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport CloseIcon from '../assets/icons/Close circle.svg'\r\nimport { Typography } from '@material-ui/core';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n        \"&.MuiDialog-root\": {\r\n            backdropFilter: \"blur(5px)\",\r\n            background: \"rgba(104, 140, 188, 0.4) !important\"\r\n        },\r\n        overflow: \"hidden\"\r\n    },\r\n    containerRoot: {\r\n      padding: theme.spacing(3),\r\n    },\r\n    tableCellName: {\r\n      fontWeight: \"bolder\", \r\n      color: \"#96999c\", \r\n      marginRight: 5\r\n    },\r\n    tableCellValue: {\r\n        fontWeight: \"bolder\", \r\n        color: \"#666b73\"\r\n    },\r\n    headerStyle: {\r\n        background: theme.palette.secondary.main,\r\n        color: theme.palette.primary.main,\r\n        display: \"flex\",\r\n        justifyContent: \"space-between\",\r\n        alignItems: \"center\"\r\n    },\r\n    buttonGreen: {\r\n        border: \"1px solid green\",\r\n        minWidth: 250,\r\n        color: \"green\",\r\n        \"&:hover\": {\r\n            color: \"green\",\r\n            border: \"1px solid green\"\r\n        }\r\n    },\r\n  }),\r\n);\r\n\r\nexport default function ProjectPresend(\r\n    {\r\n        onClose, \r\n        open, \r\n        tools,\r\n        clinicInn, \r\n        clinicAddress, \r\n        clinicName, \r\n        clinicUr,\r\n        handleNewProject,\r\n        showAdditionalReq,\r\n        dealerInn, \r\n        setDealerInn, \r\n        dealerAddress, \r\n        setDealerAddress, \r\n        dealerName, \r\n        setDealerName, \r\n        dealerUr, \r\n        setDealerUr\r\n    }) {\r\n    const classes = useStyles();\r\n\r\n    function getCheckedTools(tools) {\r\n        return tools.filter( tool => tool.isChecked === true)\r\n    }\r\n\r\n    return (\r\n        <Dialog onClose={onClose} aria-labelledby=\"simple-dialog-title\" open={open} className={classes.root} fullWidth maxWidth=\"lg\">\r\n            <DialogTitle id=\"simple-dialog-title\" className={classes.headerStyle} disableTypography>\r\n                <Typography variant=\"h5\">\r\n                    Предварительный просмотр проекта\r\n                </Typography>\r\n\r\n                <Button type=\"button\" variant=\"outlined\" className={classes.buttonGreen} onClick={() => handleNewProject(clinicName, clinicUr)}>\r\n                    Подтвердить и отправить\r\n                </Button>\r\n                \r\n                <IconButton onClick={() => onClose()} style={{marginRight: \"-16px\"}}>\r\n                    <img src={CloseIcon} />\r\n                </IconButton>\r\n            </DialogTitle>\r\n            <div className={classes.containerRoot}>\r\n                <div style={{display: \"flex\", flexDirection: \"column\"}}>\r\n                    \r\n                    <Typography variant=\"h5\" style={{marginTop: 15, marginBottom: 10, color: \"rgb(104, 140, 188)\"}}>\r\n                       Реквизиты клиента\r\n                    </Typography>\r\n                    <Typography>\r\n                        <span className={classes.tableCellName}>ИНН клиники:</span>\r\n                        <span className={classes.tableCellValue}>{clinicInn}</span>\r\n                    </Typography>\r\n                    <Typography>\r\n                        <span className={classes.tableCellName}>Название клиники:</span>\r\n                        <span className={classes.tableCellValue}>{clinicName}</span>\r\n                    </Typography>\r\n                    <Typography>\r\n                        <span className={classes.tableCellName}>Адрес клиники:</span>\r\n                        <span className={classes.tableCellValue}>{clinicAddress}</span>\r\n                    </Typography>\r\n                    <Typography>\r\n                        <span className={classes.tableCellName}>Юр.лицо клиники:</span>\r\n                        <span className={classes.tableCellValue}>{clinicUr}</span>\r\n                    </Typography>\r\n\r\n                    {showAdditionalReq ? (\r\n                        <React.Fragment>\r\n                        <Typography variant=\"h5\" style={{marginTop: 15, marginBottom: 10, color: \"rgb(104, 140, 188)\"}}>\r\n                        Реквизиты промежуточного дилера\r\n                        </Typography>\r\n                        <Typography>\r\n                            <span className={classes.tableCellName}>ИНН дилера:</span>\r\n                            <span className={classes.tableCellValue}>{dealerInn}</span>\r\n                        </Typography>\r\n                        <Typography>\r\n                            <span className={classes.tableCellName}>Название дилера:</span>\r\n                            <span className={classes.tableCellValue}>{dealerName}</span>\r\n                        </Typography>\r\n                        <Typography>\r\n                            <span className={classes.tableCellName}>Адрес дилера:</span>\r\n                            <span className={classes.tableCellValue}>{dealerAddress}</span>\r\n                        </Typography>\r\n                        <Typography>\r\n                            <span className={classes.tableCellName}>Юр.лицо дилера:</span>\r\n                            <span className={classes.tableCellValue}>{dealerUr}</span>\r\n                        </Typography>\r\n                        </React.Fragment>\r\n                    ) : null}\r\n\r\n                    <Typography variant=\"h5\" style={{marginTop: 15, marginBottom: 10, color: \"rgb(104, 140, 188)\"}}>\r\n                       Состав проекта\r\n                    </Typography>\r\n                    \r\n                    <Grid container>\r\n                        {getCheckedTools(tools).map(tool => (\r\n                            <Grid className={classes.tableCellValue} md={6}  sm={12} style={{marginBottom: 5}}>\r\n                                {tool.tool_name}\r\n                            </Grid>\r\n                        ))}\r\n                    </Grid>\r\n                </div>\r\n            </div>\r\n        </Dialog>\r\n    );\r\n}","C:\\Projects\\dealer_front\\src\\components\\FixedCalcBottom.tsx",[],"C:\\Projects\\dealer_front\\src\\components\\CommercialOfferOne.tsx",[],"C:\\Projects\\dealer_front\\src\\components\\ModalCommercialOfferPresend.tsx",[],"C:\\Projects\\dealer_front\\src\\components\\CommercialOfferPositionMain.tsx",["371","372"],"import React from 'react';\r\nimport Paper from '@material-ui/core/Paper'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableRow from '@material-ui/core/TableRow';\r\n\r\nimport ActionDelete from \"@material-ui/icons/Delete\";\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport Fab from \"@material-ui/core/Fab\";\r\n\r\nimport Input from '@material-ui/core/Input';\r\n\r\nimport { makeStyles, createStyles, Theme, withStyles } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    mainPaper: {\r\n        marginBottom: theme.spacing(1),\r\n        padding: theme.spacing(2),\r\n    },\r\n    secondaryPaper: {\r\n      marginBottom: theme.spacing(1),\r\n      padding: theme.spacing(2),\r\n      marginLeft: 30\r\n    },\r\n    table: {\r\n        width: \"100%\",\r\n        height: \"100%\",\r\n    },\r\n  }),\r\n);\r\n\r\nconst StyledTableCell = withStyles((theme: Theme) =>\r\n  createStyles({\r\n    head: {\r\n      backgroundColor: theme.palette.common.black,\r\n      color: theme.palette.common.white,\r\n    },\r\n    body: {\r\n      fontSize: 14,\r\n    },\r\n  }),\r\n)(TableCell);\r\n\r\nconst StyledTableRowDealer = withStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      '&:nth-of-type(even)': {\r\n        backgroundColor: \"#D6D2C4\",\r\n      },\r\n    },\r\n  }),\r\n)(TableRow);\r\nconst StyledTableRowClient = withStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      '&:nth-of-type(even)': {\r\n        backgroundColor: theme.palette.action.hover,\r\n      },\r\n    },\r\n  }),\r\n)(TableRow);\r\n\r\nfunction CommercialOfferPositionMain(\r\n  { \r\n    primary,\r\n    tool,\r\n    deleteTool,\r\n    addedTools,\r\n    setAddedTools\r\n   }) \r\n  {\r\n  const basePrice: number = tool.dealerPrice\r\n  const [dealerDiscount, setDealerDiscount] = React.useState<number>(tool.dealerDiscount)\r\n  const [dealerPrice, setDealerPrice] = React.useState<number>(basePrice - (basePrice/100)*dealerDiscount)\r\n\r\n  const [clientPrice, setClientPrice] = React.useState<number>(tool.clientPrice)\r\n  const [clientDiscount, setClientDiscount] = React.useState<number>(tool.clientDiscount)\r\n  const [count, setCount] = React.useState<number>(tool.count)\r\n  const classes = useStyles()\r\n\r\n  function changeHandler(e) {\r\n    let currentTools = addedTools.splice(0)\r\n    if (e.target.name === 'clientDiscount') {\r\n      const newClientDiscount = e.target.value\r\n      const newClientPrice = basePrice - (basePrice * (e.target.value / 100))\r\n\r\n      let newTools = outerToolsRewriter(currentTools, 'clientDiscount', newClientDiscount)\r\n      newTools = outerToolsRewriter(currentTools, 'clientPrice', newClientPrice)\r\n      setClientDiscount(newClientDiscount)\r\n      setClientPrice(newClientPrice)\r\n      setAddedTools(newTools)\r\n    }\r\n    if (e.target.name === 'clientPrice') {\r\n      setClientPrice(e.target.value)\r\n      setClientDiscount((basePrice - e.target.value) / (basePrice / 100))\r\n    }\r\n    if (e.target.name === \"count\") {\r\n      let newTools = outerToolsRewriter(currentTools, 'count', e.target.value)\r\n      setCount(e.target.value)\r\n      setAddedTools(newTools)\r\n    }\r\n  }\r\n\r\n  function outerToolsRewriter(clonedTools, field, value) {\r\n    const ind = clonedTools.findIndex( obj => obj.id === tool.id)\r\n    let foundTool = clonedTools[ind]\r\n    foundTool[field] = value\r\n    clonedTools[ind] = foundTool\r\n    return clonedTools\r\n  }\r\n\r\n  return (\r\n      <Paper className={primary ? classes.mainPaper : classes.secondaryPaper}>\r\n          <Grid container spacing={1}>\r\n              <Grid xl={3} lg={12} item>\r\n                  <Typography variant=\"subtitle1\" paragraph>\r\n                      {tool && tool.name ? tool.name : null}\r\n                  </Typography>\r\n                  <Typography variant=\"subtitle1\" paragraph>\r\n                      Количество\r\n                  </Typography>\r\n                  <Input type=\"number\" value={count} name=\"count\" onChange={changeHandler}/>\r\n              </Grid>\r\n              <Grid xl={4} lg={12} item>\r\n                  <Table className={classes.table} aria-label=\"customized table\" size=\"small\">\r\n                      <TableBody>\r\n                          <StyledTableRowDealer>\r\n                              <StyledTableCell>Розничная цена(ед)</StyledTableCell>\r\n                              <StyledTableCell>{basePrice}</StyledTableCell>\r\n                          </StyledTableRowDealer>\r\n                          <StyledTableRowDealer>\r\n                              <StyledTableCell>Скидка дилеру</StyledTableCell>\r\n                              <StyledTableCell>{dealerDiscount} %</StyledTableCell>\r\n                          </StyledTableRowDealer>\r\n                          <StyledTableRowDealer>\r\n                              <StyledTableCell>Цена для дилера</StyledTableCell>\r\n                              <StyledTableCell>{dealerPrice} ₽</StyledTableCell>\r\n                          </StyledTableRowDealer>\r\n\r\n                          <StyledTableRowDealer>\r\n                              <StyledTableCell>Итого для дилера</StyledTableCell>\r\n                              <StyledTableCell>{dealerPrice * count} ₽</StyledTableCell>\r\n                          </StyledTableRowDealer>\r\n                      </TableBody>\r\n                  </Table>\r\n              </Grid>\r\n              <Grid xl={4} lg={12} item>\r\n                  <Table className={classes.table} aria-label=\"customized table\" size=\"small\">\r\n                      <TableBody>\r\n                          <StyledTableRowClient>\r\n                              <StyledTableCell>Розничная цена(ед)</StyledTableCell>\r\n                              <StyledTableCell>{basePrice} ₽</StyledTableCell>\r\n                          </StyledTableRowClient>\r\n                          <StyledTableRowClient>\r\n                              <StyledTableCell>Скидка клиенту</StyledTableCell>\r\n                              <StyledTableCell>\r\n                                <Input \r\n                                type=\"number\" \r\n                                value={clientDiscount}\r\n                                name=\"clientDiscount\"\r\n                                onChange={changeHandler}\r\n                                />\r\n                              </StyledTableCell>\r\n                          </StyledTableRowClient>\r\n                          <StyledTableRowClient>\r\n                              <StyledTableCell>Цена для клиента</StyledTableCell>\r\n                              <StyledTableCell>\r\n                                <Input \r\n                                type=\"text\" \r\n                                value={clientPrice}\r\n                                name=\"clientPrice\"\r\n                                onChange={changeHandler}\r\n                                />\r\n                              </StyledTableCell>\r\n                          </StyledTableRowClient>\r\n\r\n                          <StyledTableRowClient>\r\n                              <StyledTableCell>Итого для клиента</StyledTableCell>\r\n                              <StyledTableCell>{clientPrice * count} ₽</StyledTableCell>\r\n                          </StyledTableRowClient>\r\n                      </TableBody>\r\n                  </Table>                    \r\n              </Grid>\r\n              <Grid md={12} sm={12} xs={12} lg={1} item>\r\n              <Tooltip title=\"Удалить\" aria-label=\"delete\" >\r\n                <Fab\r\n                  size=\"small\"\r\n                  onClick={() => deleteTool(tool.uid, tool.id)}\r\n                >\r\n                  <ActionDelete />\r\n                </Fab>\r\n              </Tooltip>\r\n              </Grid>\r\n          </Grid>\r\n      </Paper>\r\n  );\r\n}\r\n\r\nexport default CommercialOfferPositionMain","C:\\Projects\\dealer_front\\src\\components\\DataTable.tsx",["373","374","375","376"],"import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\n\r\nimport Fab from \"@material-ui/core/Fab\";\r\nimport ContentCreate from \"@material-ui/icons/Create\";\r\nimport ActionDelete from \"@material-ui/icons/Delete\";\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport GetAppIcon from '@material-ui/icons/GetApp';\r\n\r\nimport { pink, grey, green, common, red } from \"@material-ui/core/colors\";\r\n\r\nconst grey500 = grey[\"500\"];\r\nconst green400 = green[\"400\"];\r\nconst white = common.white;\r\n\r\nconst useStyles = makeStyles({\r\n  table: {\r\n    minWidth: 650,\r\n  },\r\n  searchButton: {\r\n    marginRight: 20,\r\n  },\r\n  editButton: {\r\n    marginRight: \"1em\",\r\n    color: white,\r\n    backgroundColor: green400,\r\n  },\r\n  editButtonIcon: {\r\n    fill: white,\r\n  },\r\n  downloadButton: {\r\n    fill: green400,\r\n    margin: 5\r\n  },\r\n  deleteButton: {\r\n    color: \"grey\",\r\n    fill: red['400'],\r\n    margin: 5\r\n  },\r\n  columns: {\r\n    width10: {\r\n      width: \"10%\",\r\n    },\r\n  },\r\n  row: {\r\n    margin: \"1.5em\",\r\n    width: \"95%\",\r\n  },\r\n  pagination: {\r\n    width: 350,\r\n    margin: \"0 auto\",\r\n    paddingTop: 10,\r\n  },\r\n});\r\n\r\ninterface DataTableProps {\r\n  model?: string;\r\n  headers?: string[],\r\n  rows: Object,\r\n  actions?: string[]\r\n}\r\n\r\nfunction ActionReturner({actionName}) {\r\n  const classes = useStyles();\r\n  if (actionName === 'edit') {\r\n    return (\r\n      <Tooltip title=\"Edit\" aria-label=\"edit\">\r\n        <Fab\r\n          size=\"small\"\r\n          className={classes.editButton}\r\n        >\r\n          <ContentCreate />\r\n        </Fab>\r\n      </Tooltip>\r\n    )\r\n  }\r\n  if (actionName === 'delete') {\r\n    return (\r\n      <Tooltip title=\"Delete\" aria-label=\"delete\">\r\n        <Fab\r\n          size=\"small\"\r\n          className={classes.deleteButton}\r\n        >\r\n          <ActionDelete />\r\n        </Fab>\r\n      </Tooltip>\r\n    )\r\n  }\r\n  if (actionName === 'download') {\r\n    return (\r\n      <Tooltip title=\"Download\" aria-label=\"download\">\r\n        <Fab\r\n          size=\"small\"\r\n          className={classes.deleteButton}\r\n        >\r\n          <GetAppIcon />\r\n        </Fab>\r\n      </Tooltip>\r\n    )\r\n  }\r\n  if (actionName === 'checkbox') {\r\n    return (\r\n      <Checkbox\r\n      />\r\n    )\r\n  }\r\n}\r\n\r\nexport default function DataTable<DataTableProps>({headers, rows, actions}) {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <TableContainer component={Paper}>\r\n      <Table className={classes.table} aria-label=\"simple table\">\r\n        <TableHead>\r\n          <TableRow>\r\n            {headers ? headers.map(item => <TableCell>{item}</TableCell>) : null}\r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody>\r\n          {rows.map((row) => (\r\n            <TableRow key={row.name}>\r\n                {row.cells.map( elem => <TableCell>{elem}</TableCell>)}\r\n                {actions ? actions.map( act => <ActionReturner actionName={act} />) : null}\r\n            </TableRow>\r\n          ))}\r\n        </TableBody>\r\n      </Table>\r\n    </TableContainer>\r\n  );\r\n}","C:\\Projects\\dealer_front\\src\\components\\SortedToolsTable.tsx",[],{"ruleId":"377","replacedBy":"378"},{"ruleId":"379","replacedBy":"380"},{"ruleId":"381","severity":1,"message":"382","line":16,"column":3,"nodeType":"383","messageId":"384","endLine":16,"endColumn":11},{"ruleId":"381","severity":1,"message":"385","line":19,"column":3,"nodeType":"383","messageId":"384","endLine":19,"endColumn":13},{"ruleId":"381","severity":1,"message":"386","line":52,"column":28,"nodeType":"383","messageId":"384","endLine":52,"endColumn":38},{"ruleId":"387","severity":1,"message":"388","line":88,"column":6,"nodeType":"389","endLine":88,"endColumn":8,"suggestions":"390"},{"ruleId":"381","severity":1,"message":"391","line":7,"column":5,"nodeType":"383","messageId":"384","endLine":7,"endColumn":14},{"ruleId":"381","severity":1,"message":"392","line":4,"column":10,"nodeType":"383","messageId":"384","endLine":4,"endColumn":20},{"ruleId":"381","severity":1,"message":"393","line":2,"column":8,"nodeType":"383","messageId":"384","endLine":2,"endColumn":26},{"ruleId":"381","severity":1,"message":"394","line":22,"column":24,"nodeType":"383","messageId":"384","endLine":22,"endColumn":37},{"ruleId":"381","severity":1,"message":"395","line":143,"column":25,"nodeType":"383","messageId":"384","endLine":143,"endColumn":39},{"ruleId":"396","severity":1,"message":"397","line":196,"column":29,"nodeType":"398","endLine":196,"endColumn":146},{"ruleId":"396","severity":1,"message":"397","line":252,"column":26,"nodeType":"398","endLine":252,"endColumn":75},{"ruleId":"396","severity":1,"message":"397","line":257,"column":26,"nodeType":"398","endLine":257,"endColumn":75},{"ruleId":"381","severity":1,"message":"399","line":2,"column":8,"nodeType":"383","messageId":"384","endLine":2,"endColumn":17},{"ruleId":"381","severity":1,"message":"400","line":60,"column":7,"nodeType":"383","messageId":"384","endLine":60,"endColumn":32},{"ruleId":"387","severity":1,"message":"401","line":146,"column":8,"nodeType":"389","endLine":146,"endColumn":10,"suggestions":"402"},{"ruleId":"381","severity":1,"message":"403","line":11,"column":10,"nodeType":"383","messageId":"384","endLine":11,"endColumn":20},{"ruleId":"381","severity":1,"message":"404","line":2,"column":8,"nodeType":"383","messageId":"384","endLine":2,"endColumn":17},{"ruleId":"381","severity":1,"message":"405","line":3,"column":8,"nodeType":"383","messageId":"384","endLine":3,"endColumn":13},{"ruleId":"381","severity":1,"message":"406","line":7,"column":8,"nodeType":"383","messageId":"384","endLine":7,"endColumn":14},{"ruleId":"381","severity":1,"message":"407","line":12,"column":43,"nodeType":"383","messageId":"384","endLine":12,"endColumn":53},{"ruleId":"381","severity":1,"message":"408","line":18,"column":10,"nodeType":"383","messageId":"384","endLine":18,"endColumn":19},{"ruleId":"381","severity":1,"message":"409","line":81,"column":18,"nodeType":"383","messageId":"384","endLine":81,"endColumn":25},{"ruleId":"387","severity":1,"message":"410","line":95,"column":8,"nodeType":"389","endLine":95,"endColumn":10,"suggestions":"411"},{"ruleId":"381","severity":1,"message":"412","line":44,"column":17,"nodeType":"383","messageId":"384","endLine":44,"endColumn":25},{"ruleId":"381","severity":1,"message":"413","line":9,"column":22,"nodeType":"383","messageId":"384","endLine":9,"endColumn":34},{"ruleId":"387","severity":1,"message":"414","line":80,"column":8,"nodeType":"389","endLine":80,"endColumn":19,"suggestions":"415"},{"ruleId":"416","severity":1,"message":"417","line":125,"column":20,"nodeType":"418","messageId":"419","endLine":125,"endColumn":32,"fix":"420"},{"ruleId":"381","severity":1,"message":"421","line":1,"column":16,"nodeType":"383","messageId":"384","endLine":1,"endColumn":24},{"ruleId":"381","severity":1,"message":"422","line":6,"column":8,"nodeType":"383","messageId":"384","endLine":6,"endColumn":20},{"ruleId":"381","severity":1,"message":"423","line":8,"column":10,"nodeType":"383","messageId":"384","endLine":8,"endColumn":22},{"ruleId":"381","severity":1,"message":"424","line":10,"column":36,"nodeType":"383","messageId":"384","endLine":10,"endColumn":44},{"ruleId":"387","severity":1,"message":"425","line":70,"column":8,"nodeType":"389","endLine":70,"endColumn":10,"suggestions":"426"},{"ruleId":"381","severity":1,"message":"427","line":2,"column":5,"nodeType":"383","messageId":"384","endLine":2,"endColumn":13},{"ruleId":"381","severity":1,"message":"391","line":7,"column":5,"nodeType":"383","messageId":"384","endLine":7,"endColumn":14},{"ruleId":"381","severity":1,"message":"428","line":3,"column":25,"nodeType":"383","messageId":"384","endLine":3,"endColumn":39},{"ruleId":"381","severity":1,"message":"429","line":3,"column":41,"nodeType":"383","messageId":"384","endLine":3,"endColumn":51},{"ruleId":"396","severity":1,"message":"397","line":142,"column":11,"nodeType":"398","endLine":142,"endColumn":75},{"ruleId":"381","severity":1,"message":"424","line":2,"column":10,"nodeType":"383","messageId":"384","endLine":2,"endColumn":18},{"ruleId":"381","severity":1,"message":"430","line":15,"column":3,"nodeType":"383","messageId":"384","endLine":15,"endColumn":9},{"ruleId":"381","severity":1,"message":"431","line":16,"column":3,"nodeType":"383","messageId":"384","endLine":16,"endColumn":7},{"ruleId":"381","severity":1,"message":"432","line":35,"column":7,"nodeType":"383","messageId":"384","endLine":35,"endColumn":15},{"ruleId":"387","severity":1,"message":"433","line":48,"column":8,"nodeType":"389","endLine":48,"endColumn":23,"suggestions":"434"},{"ruleId":"381","severity":1,"message":"435","line":7,"column":8,"nodeType":"383","messageId":"384","endLine":7,"endColumn":13},{"ruleId":"381","severity":1,"message":"436","line":8,"column":8,"nodeType":"383","messageId":"384","endLine":8,"endColumn":17},{"ruleId":"381","severity":1,"message":"437","line":9,"column":8,"nodeType":"383","messageId":"384","endLine":9,"endColumn":17},{"ruleId":"381","severity":1,"message":"438","line":10,"column":8,"nodeType":"383","messageId":"384","endLine":10,"endColumn":16},{"ruleId":"381","severity":1,"message":"404","line":11,"column":8,"nodeType":"383","messageId":"384","endLine":11,"endColumn":17},{"ruleId":"381","severity":1,"message":"406","line":12,"column":8,"nodeType":"383","messageId":"384","endLine":12,"endColumn":14},{"ruleId":"381","severity":1,"message":"439","line":13,"column":8,"nodeType":"383","messageId":"384","endLine":13,"endColumn":24},{"ruleId":"396","severity":1,"message":"397","line":66,"column":21,"nodeType":"398","endLine":66,"endColumn":44},{"ruleId":"381","severity":1,"message":"405","line":2,"column":8,"nodeType":"383","messageId":"384","endLine":2,"endColumn":13},{"ruleId":"396","severity":1,"message":"397","line":268,"column":9,"nodeType":"398","endLine":268,"endColumn":65},{"ruleId":"381","severity":1,"message":"440","line":14,"column":8,"nodeType":"383","messageId":"384","endLine":14,"endColumn":19},{"ruleId":"396","severity":1,"message":"397","line":66,"column":13,"nodeType":"398","endLine":66,"endColumn":36},{"ruleId":"396","severity":1,"message":"397","line":70,"column":9,"nodeType":"398","endLine":70,"endColumn":62},{"ruleId":"396","severity":1,"message":"397","line":67,"column":21,"nodeType":"398","endLine":67,"endColumn":44},{"ruleId":"381","severity":1,"message":"441","line":10,"column":8,"nodeType":"383","messageId":"384","endLine":10,"endColumn":11},{"ruleId":"381","severity":1,"message":"442","line":24,"column":10,"nodeType":"383","messageId":"384","endLine":24,"endColumn":19},{"ruleId":"416","severity":1,"message":"417","line":69,"column":20,"nodeType":"418","messageId":"419","endLine":69,"endColumn":32,"fix":"443"},{"ruleId":"387","severity":1,"message":"444","line":89,"column":8,"nodeType":"389","endLine":89,"endColumn":15,"suggestions":"445"},{"ruleId":"396","severity":1,"message":"397","line":199,"column":13,"nodeType":"398","endLine":199,"endColumn":39},{"ruleId":"396","severity":1,"message":"397","line":202,"column":9,"nodeType":"398","endLine":202,"endColumn":31},{"ruleId":"396","severity":1,"message":"397","line":205,"column":13,"nodeType":"398","endLine":205,"endColumn":35},{"ruleId":"381","severity":1,"message":"421","line":1,"column":17,"nodeType":"383","messageId":"384","endLine":1,"endColumn":25},{"ruleId":"396","severity":1,"message":"397","line":56,"column":32,"nodeType":"398","endLine":56,"endColumn":59},{"ruleId":"396","severity":1,"message":"397","line":68,"column":28,"nodeType":"398","endLine":68,"endColumn":58},{"ruleId":"396","severity":1,"message":"397","line":75,"column":28,"nodeType":"398","endLine":75,"endColumn":56},{"ruleId":"396","severity":1,"message":"397","line":83,"column":31,"nodeType":"398","endLine":83,"endColumn":53},{"ruleId":"396","severity":1,"message":"397","line":89,"column":28,"nodeType":"398","endLine":89,"endColumn":56},{"ruleId":"396","severity":1,"message":"397","line":95,"column":31,"nodeType":"398","endLine":95,"endColumn":53},{"ruleId":"381","severity":1,"message":"446","line":15,"column":8,"nodeType":"383","messageId":"384","endLine":15,"endColumn":15},{"ruleId":"381","severity":1,"message":"447","line":16,"column":8,"nodeType":"383","messageId":"384","endLine":16,"endColumn":12},{"ruleId":"381","severity":1,"message":"448","line":17,"column":8,"nodeType":"383","messageId":"384","endLine":17,"endColumn":19},{"ruleId":"381","severity":1,"message":"449","line":18,"column":8,"nodeType":"383","messageId":"384","endLine":18,"endColumn":18},{"ruleId":"381","severity":1,"message":"450","line":19,"column":8,"nodeType":"383","messageId":"384","endLine":19,"endColumn":17},{"ruleId":"396","severity":1,"message":"397","line":236,"column":83,"nodeType":"398","endLine":236,"endColumn":105},{"ruleId":"396","severity":1,"message":"397","line":121,"column":21,"nodeType":"398","endLine":121,"endColumn":44},{"ruleId":"396","severity":1,"message":"397","line":176,"column":29,"nodeType":"398","endLine":176,"endColumn":54},{"ruleId":"396","severity":1,"message":"397","line":181,"column":29,"nodeType":"398","endLine":181,"endColumn":81},{"ruleId":"396","severity":1,"message":"397","line":186,"column":29,"nodeType":"398","endLine":186,"endColumn":49},{"ruleId":"381","severity":1,"message":"451","line":91,"column":12,"nodeType":"383","messageId":"384","endLine":91,"endColumn":22},{"ruleId":"381","severity":1,"message":"394","line":91,"column":24,"nodeType":"383","messageId":"384","endLine":91,"endColumn":37},{"ruleId":"452","severity":1,"message":"453","line":6,"column":260,"nodeType":"454","messageId":"455","endLine":6,"endColumn":261,"suggestions":"456"},{"ruleId":"377","replacedBy":"378"},{"ruleId":"379","replacedBy":"380"},{"ruleId":"452","severity":1,"message":"453","line":15,"column":75,"nodeType":"454","messageId":"455","endLine":15,"endColumn":76,"suggestions":"457"},{"ruleId":"452","severity":1,"message":"453","line":16,"column":75,"nodeType":"454","messageId":"455","endLine":16,"endColumn":76,"suggestions":"458"},{"ruleId":"452","severity":1,"message":"453","line":18,"column":138,"nodeType":"454","messageId":"455","endLine":18,"endColumn":139,"suggestions":"459"},{"ruleId":"452","severity":1,"message":"453","line":19,"column":98,"nodeType":"454","messageId":"455","endLine":19,"endColumn":99,"suggestions":"460"},{"ruleId":"452","severity":1,"message":"453","line":20,"column":76,"nodeType":"454","messageId":"455","endLine":20,"endColumn":77,"suggestions":"461"},{"ruleId":"452","severity":1,"message":"453","line":44,"column":88,"nodeType":"454","messageId":"455","endLine":44,"endColumn":89,"suggestions":"462"},{"ruleId":"452","severity":1,"message":"453","line":48,"column":54,"nodeType":"454","messageId":"455","endLine":48,"endColumn":55,"suggestions":"463"},{"ruleId":"381","severity":1,"message":"429","line":2,"column":10,"nodeType":"383","messageId":"384","endLine":2,"endColumn":20},{"ruleId":"381","severity":1,"message":"464","line":2,"column":28,"nodeType":"383","messageId":"384","endLine":2,"endColumn":34},{"ruleId":"381","severity":1,"message":"465","line":2,"column":36,"nodeType":"383","messageId":"384","endLine":2,"endColumn":46},{"ruleId":"381","severity":1,"message":"466","line":4,"column":16,"nodeType":"383","messageId":"384","endLine":4,"endColumn":22},{"ruleId":"381","severity":1,"message":"467","line":6,"column":8,"nodeType":"383","messageId":"384","endLine":6,"endColumn":13},{"ruleId":"381","severity":1,"message":"468","line":10,"column":7,"nodeType":"383","messageId":"384","endLine":10,"endColumn":14},{"ruleId":"381","severity":1,"message":"469","line":11,"column":7,"nodeType":"383","messageId":"384","endLine":11,"endColumn":18},{"ruleId":"381","severity":1,"message":"470","line":50,"column":11,"nodeType":"383","messageId":"384","endLine":50,"endColumn":25},{"ruleId":"381","severity":1,"message":"470","line":56,"column":20,"nodeType":"383","messageId":"384","endLine":56,"endColumn":34},{"ruleId":"396","severity":1,"message":"397","line":86,"column":29,"nodeType":"398","endLine":86,"endColumn":51},{"ruleId":"381","severity":1,"message":"465","line":2,"column":16,"nodeType":"383","messageId":"384","endLine":2,"endColumn":26},{"ruleId":"381","severity":1,"message":"471","line":5,"column":8,"nodeType":"383","messageId":"384","endLine":5,"endColumn":25},{"ruleId":"381","severity":1,"message":"467","line":6,"column":8,"nodeType":"383","messageId":"384","endLine":6,"endColumn":13},{"ruleId":"381","severity":1,"message":"472","line":13,"column":7,"nodeType":"383","messageId":"384","endLine":13,"endColumn":13},{"ruleId":"381","severity":1,"message":"473","line":87,"column":11,"nodeType":"383","messageId":"384","endLine":87,"endColumn":33},{"ruleId":"381","severity":1,"message":"473","line":93,"column":28,"nodeType":"383","messageId":"384","endLine":93,"endColumn":50},{"ruleId":"396","severity":1,"message":"397","line":123,"column":29,"nodeType":"398","endLine":123,"endColumn":51},{"ruleId":"396","severity":1,"message":"397","line":89,"column":21,"nodeType":"398","endLine":89,"endColumn":44},{"ruleId":"381","severity":1,"message":"474","line":78,"column":26,"nodeType":"383","messageId":"384","endLine":78,"endColumn":43},{"ruleId":"381","severity":1,"message":"475","line":79,"column":23,"nodeType":"383","messageId":"384","endLine":79,"endColumn":37},{"ruleId":"381","severity":1,"message":"476","line":18,"column":10,"nodeType":"383","messageId":"384","endLine":18,"endColumn":14},{"ruleId":"381","severity":1,"message":"477","line":20,"column":7,"nodeType":"383","messageId":"384","endLine":20,"endColumn":14},{"ruleId":"381","severity":1,"message":"478","line":64,"column":11,"nodeType":"383","messageId":"384","endLine":64,"endColumn":25},{"ruleId":"381","severity":1,"message":"478","line":117,"column":35,"nodeType":"383","messageId":"384","endLine":117,"endColumn":49},"no-native-reassign",["479"],"no-negated-in-lhs",["480"],"@typescript-eslint/no-unused-vars","'SIGN_OUT' is defined but never used.","Identifier","unusedVar","'LIST_TOOLS' is defined but never used.","'signInUser' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook React.useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside React.useEffect.","ArrayExpression",["481"],"'SET_ERROR' is defined but never used.","'isSignIned' is defined but never used.","'ToolsOffersSidebar' is defined but never used.","'setAuthorised' is assigned a value but never used.","'setHeadCompany' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'DataTable' is defined but never used.","'testUserListReducedToRows' is assigned a value but never used.","React Hook React.useEffect has a missing dependency: 'getUsers'. Either include it or remove the dependency array. If 'getUsers' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["482"],"'setSuccess' is defined but never used.","'TextField' is defined but never used.","'Paper' is defined but never used.","'Switch' is defined but never used.","'withStyles' is defined but never used.","'thunkAuth' is defined but never used.","'setUser' is assigned a value but never used.","React Hook React.useEffect has missing dependencies: 'getProjects', 'projectListAction', and 'projectsList'. Either include them or remove the dependency array. If 'getProjects' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["483"],"'endpoint' is assigned a value but never used.","'unsetSuccess' is defined but never used.","React Hook React.useEffect has a missing dependency: 'getProjects'. Either include it or remove the dependency array. If 'getProjects' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["484"],"new-parens","Missing '()' invoking a constructor.","NewExpression","missing",{"range":"485","text":"486"},"'useState' is defined but never used.","'UserDropdown' is defined but never used.","'layoutStyles' is defined but never used.","'useTheme' is defined but never used.","React Hook React.useEffect has missing dependencies: 'app.sidebarOpened', 'closeSidebar', and 'openSidebar'. Either include them or remove the dependency array. If 'closeSidebar' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["487"],"'AppState' is defined but never used.","'SliderClassKey' is defined but never used.","'Typography' is defined but never used.","'Sector' is defined but never used.","'Cell' is defined but never used.","'cardinal' is assigned a value but never used.","React Hook React.useEffect has a missing dependency: 'positionSelectHandler'. Either include it or remove the dependency array.",["488"],"'Table' is defined but never used.","'TableBody' is defined but never used.","'TableCell' is defined but never used.","'TableRow' is defined but never used.","'FormControlLabel' is defined but never used.","'CompanyCard' is defined but never used.","'Box' is defined but never used.","'thunkData' is defined but never used.",{"range":"489","text":"486"},"React Hook React.useEffect has a missing dependency: 'sortToolsByStatus'. Either include it or remove the dependency array.",["490"],"'Popover' is defined but never used.","'Card' is defined but never used.","'CardContent' is defined but never used.","'CardHeader' is defined but never used.","'CardMedia' is defined but never used.","'authorised' is assigned a value but never used.","no-useless-escape","Unnecessary escape character: \\/.","Literal","unnecessaryEscape",["491","492"],["493","494"],["495","496"],["497","498"],["499","500"],["501","502"],["503","504"],["505","506"],"'Avatar' is defined but never used.","'IconButton' is defined but never used.","'common' is defined but never used.","'Badge' is defined but never used.","'blue600' is assigned a value but never used.","'drawerWidth' is assigned a value but never used.","'MailsMenuProps' is defined but never used.","'NotificationsIcon' is defined but never used.","'styles' is assigned a value but never used.","'NotificationsMenuProps' is defined but never used.","'setDealerDiscount' is assigned a value but never used.","'setDealerPrice' is assigned a value but never used.","'pink' is defined but never used.","'grey500' is assigned a value but never used.","'DataTableProps' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"507","fix":"508"},{"desc":"509","fix":"510"},{"desc":"511","fix":"512"},{"desc":"513","fix":"514"},[3775,3775],"()",{"desc":"515","fix":"516"},{"desc":"517","fix":"518"},[2350,2350],{"desc":"519","fix":"520"},{"messageId":"521","fix":"522","desc":"523"},{"messageId":"524","fix":"525","desc":"526"},{"messageId":"521","fix":"527","desc":"523"},{"messageId":"524","fix":"528","desc":"526"},{"messageId":"521","fix":"529","desc":"523"},{"messageId":"524","fix":"530","desc":"526"},{"messageId":"521","fix":"531","desc":"523"},{"messageId":"524","fix":"532","desc":"526"},{"messageId":"521","fix":"533","desc":"523"},{"messageId":"524","fix":"534","desc":"526"},{"messageId":"521","fix":"535","desc":"523"},{"messageId":"524","fix":"536","desc":"526"},{"messageId":"521","fix":"537","desc":"523"},{"messageId":"524","fix":"538","desc":"526"},{"messageId":"521","fix":"539","desc":"523"},{"messageId":"524","fix":"540","desc":"526"},"Update the dependencies array to be: [props]",{"range":"541","text":"542"},"Update the dependencies array to be: [getUsers]",{"range":"543","text":"544"},"Update the dependencies array to be: [getProjects, projectListAction, projectsList]",{"range":"545","text":"546"},"Update the dependencies array to be: [getProjects, toolsList]",{"range":"547","text":"548"},"Update the dependencies array to be: [app.sidebarOpened, closeSidebar, openSidebar]",{"range":"549","text":"550"},"Update the dependencies array to be: [positionSelectHandler, positionsTree]",{"range":"551","text":"552"},"Update the dependencies array to be: [sortToolsByStatus, tools]",{"range":"553","text":"554"},"removeEscape",{"range":"555","text":"556"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"557","text":"558"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"559","text":"556"},{"range":"560","text":"558"},{"range":"561","text":"556"},{"range":"562","text":"558"},{"range":"563","text":"556"},{"range":"564","text":"558"},{"range":"565","text":"556"},{"range":"566","text":"558"},{"range":"567","text":"556"},{"range":"568","text":"558"},{"range":"569","text":"556"},{"range":"570","text":"558"},{"range":"571","text":"556"},{"range":"572","text":"558"},[2210,2212],"[props]",[4196,4198],"[getUsers]",[2828,2830],"[getProjects, projectListAction, projectsList]",[2354,2365],"[getProjects, toolsList]",[2056,2058],"[app.sidebarOpened, closeSidebar, openSidebar]",[1675,1690],"[positionSelectHandler, positionsTree]",[2844,2851],"[sortToolsByStatus, tools]",[957,958],"",[957,957],"\\",[3049,3050],[3049,3049],[3307,3308],[3307,3307],[3934,3935],[3934,3934],[4215,4216],[4215,4215],[4474,4475],[4474,4474],[10114,10115],[10114,10114],[11032,11033],[11032,11032]]